@using Microsoft.AspNetCore.Components


<nav class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4" aria-label="Table navigation">
    <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
        Showing
        <span class="font-semibold text-gray-900 dark:text-white">@StartItem-@EndItem</span>
        of
        <span class="font-semibold text-gray-900 dark:text-white">@TotalItems</span>
    </span>
    <ul class="inline-flex items-stretch -space-x-px">
        <li>
            <button @onclick="PreviousPage" disabled="@IsFirstPage"
                class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">
                <span class="sr-only">Previous</span>
                <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            </button>
        </li>
        @foreach (var page in VisiblePages)
        {
            <li>
                <button @onclick="() => SelectPage(page)" aria-current="@(page == CurrentPage ? "page" : null)"
                    class="@GetPageButtonClass(page)">
                    @(page)
                </button>
            </li>
        }
        @if (ShowEllipsis)
        {
            <li>
                <span class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400">...</span>
            </li>
            <li>
                <button @onclick="() => SelectPage(TotalPages)" class="@GetPageButtonClass(TotalPages)">
                    @TotalPages
                </button>
            </li>
        }
        <li>
            <button @onclick="NextPage" disabled="@IsLastPage"
                class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">
                <span class="sr-only">Next</span>
                <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
            </button>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);
    private int StartItem => ((CurrentPage - 1) * PageSize) + 1;
    private int EndItem => Math.Min(CurrentPage * PageSize, TotalItems);

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private IEnumerable<int> VisiblePages
    {
        get
        {
            // Show up to 3 pages before and after current page
            var start = Math.Max(1, CurrentPage - 2);
            var end = Math.Min(TotalPages, CurrentPage + 2);
            for (int i = start; i <= end; i++)
                yield return i;
        }
    }

    private bool ShowEllipsis => TotalPages > 6 && (CurrentPage + 2) < TotalPages;

    private string GetPageButtonClass(int page)
    {
        if (page == CurrentPage)
        {
            return "flex items-center justify-center text-sm z-10 py-2 px-3 leading-tight text-primary-600 bg-primary-50 border border-primary-300 hover:bg-primary-100 hover:text-primary-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white";
        }
        return "flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white";
    }

    private async Task SelectPage(int page)
    {
        if (page != CurrentPage && page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            await OnPageChanged.InvokeAsync(page);
        }
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            await SelectPage(CurrentPage - 1);
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            await SelectPage(CurrentPage + 1);
        }
    }
}