@inject ToastService ToastService
@implements IDisposable

@if (Visible)
{
    <div class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50">
        <div class="@ToastCss">
            <div class="flex items-center justify-between">
                <span>@Message</span>
                <button @onclick="Hide" class="ml-4 text-white font-bold">Ã—</button>
            </div>
        </div>
    </div>
}

@code {
    private bool Visible;
    private string Message = string.Empty;
    private string Type = "info";
    private CancellationTokenSource? _cts;

    private string ToastCss => $"p-4 rounded shadow text-white {GetToastCss(Type)}";

    protected override void OnInitialized()
    {        
        ToastService.OnShow += Show;
        ToastService.OnHide += Hide;
    }

    private async void Show(string message, string type, int duration)
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();

        Message = message;
        Type = type;
        Visible = true;
        StateHasChanged();

        try
        {
            await Task.Delay(duration * 1000, _cts.Token);
            Hide();
        }
        catch (TaskCanceledException) { }
    }

    private void Hide()
    {
        if (!Visible) return;
        Visible = false;
        StateHasChanged();
    }

    private string GetToastCss(string type) => type switch
    {
        "success" => "bg-green-500",
        "error" => "bg-red-500",
        "warning" => "bg-yellow-500",
        _ => "bg-blue-500"
    };

    public void Dispose()
    {
        ToastService.OnShow -= Show;
        ToastService.OnHide -= Hide;
        _cts?.Cancel();
        _cts?.Dispose();
    }
}