 @using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Forms

@inject ILocationService LocationService
 <div>
    <label for="Destination" class="block text-sm font-medium text-gray-700 dark:text-white">State</label>
    <InputSelect id="Destination" 
        class="@GetInputClass("Destination")"
        ValueExpression="@(() => Destination)"
            Value="@Destination" 
        ValueChanged="@((string value) => OnValueChanged(value ))">
    <option value="">Select State</option>
    @foreach (var state in States)
    {
        <option value="@StringConverter.ConvertToTitleCase(state)">@StringConverter.ConvertToTitleCase(state)</option>
    }
    </InputSelect>
    @if (Errors!.ContainsKey($"{FieldName}"))
    {
        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@Errors[$"{FieldName}"]</p>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public string? Destination { get; set; } = default!;
    [Parameter]
    public string? FieldName { get; set; } = "Destination";

    [Parameter]
    public Dictionary<string, string>? Errors { get; set; }

    [Parameter]
    public Func<string, string>? GetInputClass { get; set; }
    [Parameter]
    public EventCallback<string> OnLocationChanged { get; set; }
    
    private List<string>? States = [];


    protected override async Task OnInitializedAsync()
    {
        States = await LocationService.States(AppState.GetCancellationToken());
    }
    private async Task OnValueChanged(string? selectedState)
    {
        Destination = selectedState;
        await OnLocationChanged.InvokeAsync(Destination!);
        StateHasChanged();
    }
}