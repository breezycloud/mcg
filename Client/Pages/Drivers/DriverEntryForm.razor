@page "/drivers/{Action}/{Id:guid?}"
@inject IDriverService DriverService


<div class="max-w-2xl mx-auto p-4 sm:p-6">
    @if (AppState.IsBusy)
    {
        <Loader/>
    }
    else
    {
        <!-- Form Header -->
        <div class="mb-6">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white">@(EditMode ? "Edit Driver" : "Add New Driver")</h2>
            <p class="text-sm text-gray-500 dark:text-gray-400">Please fill in the driver details below</p>
        </div>

        <!-- Driver Form -->
        <EditForm Model="@CurrentDriver" OnValidSubmit="HandleSubmit" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- First Name -->
                <div>
                    <label for="firstName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        First Name <span class="text-red-500">*</span>
                    </label>
                    <InputText type="text" id="firstName" @bind-Value="CurrentDriver.FirstName"
                        class="@GetInputClass("FirstName")"
                        placeholder="John"/>            
                    @if (errors.ContainsKey("FirstName"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["FirstName"]</p>
                    }
                </div>

                <!-- Last Name -->
                <div>
                    <label for="lastName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Last Name <span class="text-red-500">*</span>
                    </label>
                    <InputText type="text" id="lastName" @bind-Value="CurrentDriver.LastName"
                        class="@GetInputClass("LastName")"
                        placeholder="Doe"/>
                    @if (errors.ContainsKey("LastName"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LastName"]</p>
                    }
                </div>
            </div>
            
            <!-- Phone Number -->
            <div>
                <label for="phoneNo" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Phone Number
                </label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
                        </svg>
                    </div>
                    <InputText type="tel" id="phoneNo" @bind-Value="CurrentDriver.PhoneNo"
                        class="@GetInputClass("PhoneNo")"
                        placeholder="12345678901"
                        maxlength="11"/>
                </div>
                @if (errors.ContainsKey("PhoneNo"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["PhoneNo"]</p>
                }
                <p class="mt-2 text-xs text-gray-500 dark:text-gray-400">Must be exactly 11 digits</p>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- License Number -->
                <div>
                    <label for="licenseNo" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        License Number <span class="text-red-500">*</span>
                    </label>
                    <InputText type="text" id="licenseNo" @bind-Value="CurrentDriver.LicenseNo"
                        class="@GetInputClass("LicenseNo")"
                        placeholder="Enter license number"/>
                    @if (errors.ContainsKey("LicenseNo"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LicenseNo"]</p>
                    }
                </div>

                <!-- Expiry Date -->
                <div>
                    <label for="expiryDate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Expiry Date <span class="text-red-500">*</span>
                    </label>
                    <InputDate id="expiryDate" @bind-Value="CurrentDriver.ExpiryDate"
                        class="@GetInputClass("ExpiryDate")"/>
                    @if (errors.ContainsKey("ExpiryDate"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["ExpiryDate"]</p>
                    }
                </div>
            </div>
        

            <div>
                <FileUploadView OnFilesUploaded="@OnUploadComplete"/>
            </div>
            <div>
                <FileListView Files="CurrentDriver.Files"/>
            </div>

            <!-- Dates (Display only when editing) -->
            @if (EditMode)
            {
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                            Created At
                        </label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @CurrentDriver.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                            Last Updated
                        </label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @(CurrentDriver.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                        </div>
                    </div>
                </div>
            }

            <!-- Form Actions -->
            <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button type="button" @onclick="Cancel"
                    class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">
                Cancel
                </button>
                <button type="submit"
                    class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 flex items-center gap-2"
                    disabled="@AppState.IsProcessing">
                    @if (AppState.IsProcessing)
                    {
                        <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                        </svg>
                        @("Processing...")
                    }
                    else
                    {
                        @(EditMode ? "Update Driver" : "Add Driver")
                    }
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public Driver CurrentDriver { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    bool result = false;
    private NotificationAlert? alert = null;


    private Dictionary<string, string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        // Load driver
        AppState.IsBusy = true;
        if (Id.HasValue)        
        {
            CurrentDriver = await DriverService.GetAsync(Id.Value, AppState.GetCancellationToken());
            EditMode = true;
        }
        AppState.IsBusy = false;
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = $"bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 {(fieldName.Contains("PhoneNo") ? "pl-10" : "")}";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += $" border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700 {(fieldName.Contains("PhoneNo") ? "pl-10" : "")}";
        }
        else
        {
            baseClass += $" border-gray-300 {(fieldName.Contains("PhoneNo") ? "pl-10" : "")}";
        }
        
        return baseClass;
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();
        
        // Validate required fields
        if (string.IsNullOrWhiteSpace(CurrentDriver.FirstName))
        {
            errors["FirstName"] = "First name is required";
        }
        
        if (string.IsNullOrWhiteSpace(CurrentDriver.LastName))
        {
            errors["LastName"] = "Last name is required";
        }

        if (string.IsNullOrWhiteSpace(CurrentDriver.PhoneNo))
        {
            errors["PhoneNo"] = "Phone number is required";
        }        
        else if (CurrentDriver.PhoneNo.Length > 11)
        {
            errors["PhoneNo"] = "Phone number must be exactly 11 digits";
        }

        if (string.IsNullOrWhiteSpace(CurrentDriver.LicenseNo))
        {
            errors["LicenseNo"] = "License number is required";
        }
        if (CurrentDriver.ExpiryDate == default)
        {
            errors["ExpiryDate"] = "Expiry date is required";
        }
        if (CurrentDriver.ExpiryDate.HasValue && CurrentDriver.ExpiryDate.Value <= DateOnly.FromDateTime(DateTime.Now))
        {
            errors["ExpiryDate"] = "Expiry date cannot be in the past";
        }


        if (errors!.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }

        try
        {
            CurrentDriver!.FirstName = StringConverter.ConvertToTitleCase(CurrentDriver!.FirstName!);
            CurrentDriver!.LastName = StringConverter.ConvertToTitleCase(CurrentDriver!.LastName!);

            if (!Id.HasValue)
            {
                result = await DriverService.AddAsync(CurrentDriver, AppState.GetCancellationToken());
            }
            else
                result = await DriverService.UpdateAsync(CurrentDriver, AppState.GetCancellationToken());

            if (result)
            {
                ToastService.ShowSuccess($"Driver Successfully {(EditMode ? "Updated" : "Added")}", 5);
                 Cancel();
            }    

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            alert = new($"Operaton failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    private async Task OnUploadComplete(List<UploadResult> files)
    {        
        if (files.Any())
        {
            CurrentDriver.Files.AddRange(files);
            ToastService.ShowSuccess("File(s) uploaded successfully");
        }
        else
        {
            ToastService.ShowError("Failed to upload files");
        }
        StateHasChanged();
    }
    
    private void Cancel()
    {
        nav.NavigateTo("drivers");
    }
}