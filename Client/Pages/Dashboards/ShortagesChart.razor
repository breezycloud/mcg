@* ShortagesChart.razor *@
@inject ITripService TripService
@inject IExportService ExportService
@using ApexCharts

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Shortages Analysis</h3>
        <div class="flex gap-2">
            <button @onclick="ExportShortagesData" 
                    class="px-3 py-1.5 text-xs font-medium text-green-600 bg-green-50 rounded-lg hover:bg-green-100 focus:ring-2 focus:outline-none focus:ring-green-300 dark:bg-green-900/20 dark:text-green-400 dark:hover:bg-green-900/30 flex items-center">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export
            </button>
        </div>
    </div>
    
    <div class="p-6">
        @if (IsBusy)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
        }
        else
        {
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-red-50 dark:bg-red-900/20 rounded-lg p-4 border border-red-200 dark:border-red-800">
                    <div class="flex items-center">
                        <div class="p-2 rounded-lg bg-red-100 dark:bg-red-900/30 mr-3">
                            <svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-red-600 dark:text-red-400">Total Shortages</p>
                            <p class="text-xl font-bold text-red-700 dark:text-red-300">@TotalShortages</p>
                        </div>
                    </div>
                </div>

                <div class="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-4 border border-orange-200 dark:border-orange-800">
                    <div class="flex items-center">
                        <div class="p-2 rounded-lg bg-orange-100 dark:bg-orange-900/30 mr-3">
                            <svg class="w-5 h-5 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-orange-600 dark:text-orange-400">Avg Shortage</p>
                            <p class="text-xl font-bold text-orange-700 dark:text-orange-300">@AverageShortage.ToString("F2")</p>
                        </div>
                    </div>
                </div>

                <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
                    <div class="flex items-center">
                        <div class="p-2 rounded-lg bg-blue-100 dark:bg-blue-900/30 mr-3">
                            <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-blue-600 dark:text-blue-400">Within Tolerance</p>
                            <p class="text-xl font-bold text-blue-700 dark:text-blue-300">@WithinToleranceCount</p>
                        </div>
                    </div>
                </div>

                <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 border border-purple-200 dark:border-purple-800">
                    <div class="flex items-center">
                        <div class="p-2 rounded-lg bg-purple-100 dark:bg-purple-900/30 mr-3">
                            <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"></path>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-purple-600 dark:text-purple-400">Highest Shortage</p>
                            <p class="text-xl font-bold text-purple-700 dark:text-purple-300">@HighestShortage.ToString("F2")</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chart Container -->
            <div class="mb-6">
                <ApexChart
                    @ref="chart"
                    TItem="ProductShortageData"
                    Options="@chartOptions"                        
                    Height="350"> 

                    <ApexPointSeries TItem="ProductShortageData"
                        Items="shortagesByProduct"                    
                        SeriesType="SeriesType.Bar"
                        Name="Total Shortage"
                        XValue="@(e => e.Product)"
                        YValue="@(e => decimal.Parse(e.TotalShortage.ToString("N2")))"
                        ShowDataLabels="true" />             

                    <ApexPointSeries TItem="ProductShortageData"
                        Items="shortagesByProduct"                    
                        SeriesType="SeriesType.Bar"
                        Name="Average Shortage"
                        XValue="@(e => e.Product)"
                        YValue="@(e => decimal.Parse(e.AverageShortage.ToString("N2")))"
                        ShowDataLabels="true" />
                </ApexChart>
            </div>

            <!-- Shortages Table -->
            @* <div class="overflow-x-auto">
                <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-4 py-3">Trip ID</th>
                            <th scope="col" class="px-4 py-3">Truck</th>
                            <th scope="col" class="px-4 py-3">Product</th>
                            <th scope="col" class="px-4 py-3 text-right">Loading Qty</th>
                            <th scope="col" class="px-4 py-3 text-right">Discharged Qty</th>
                            <th scope="col" class="px-4 py-3 text-right">Shortage</th>
                            <th scope="col" class="px-4 py-3 text-right">Variance %</th>
                            <th scope="col" class="px-4 py-3">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var shortage in SignificantShortages.Take(5))
                        {
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                <td class="px-4 py-3 font-mono text-xs text-gray-500 dark:text-gray-400">
                                    @shortage.TripId.ToString().Substring(0, 8)...
                                </td>
                                <td class="px-4 py-3 font-medium text-gray-900 dark:text-white">
                                    @shortage.TruckNumber
                                </td>
                                <td class="px-4 py-3">
                                    <span class="px-2 py-1 text-xs font-medium rounded-full @GetProductBadgeClass(shortage.Product)">
                                        @shortage.Product
                                    </span>
                                </td>
                                <td class="px-4 py-3 text-right font-medium">
                                    @shortage.LoadingQuantity.ToString("F2")
                                </td>
                                <td class="px-4 py-3 text-right">
                                    @shortage.DischargedQuantity.ToString("F2")
                                </td>
                                <td class="px-4 py-3 text-right font-semibold @(shortage.ShortageAmount > 0 ? "text-red-600 dark:text-red-400" : "text-green-600 dark:text-green-400")">
                                    @Math.Abs(shortage.ShortageAmount).ToString("F2")
                                </td>
                                <td class="px-4 py-3 text-right @(shortage.VariancePercentage > 0.29m ? "text-red-600 dark:text-red-400" : "text-green-600 dark:text-green-400")">
                                    @shortage.VariancePercentage.ToString("F2")%
                                </td>
                                <td class="px-4 py-3">
                                    <span class="px-2 py-1 text-xs font-medium rounded-full @GetShortageStatusBadgeClass(shortage.VariancePercentage)">
                                        @GetShortageStatus(shortage.VariancePercentage)
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table> 
                
                @if (!SignificantShortages.Any())
                {
                    <div class="text-center py-8">
                        <svg class="w-12 h-12 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                        </svg>
                        <h3 class="mt-4 text-lg font-medium text-gray-900 dark:text-white">No shortages detected</h3>
                        <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                            All trips are within acceptable tolerance limits
                        </p>
                    </div>
                }
            </div>
            *@
        }
    </div>
</div>

@code {
    [Parameter] public DateOnly StartDate { get; set; }
    [Parameter] public DateOnly EndDate { get; set; }
    [Parameter] public Product? Product { get; set; }

    private List<ShortageAnalysis> AllShortages { get; set; } = new();
    private List<ShortageAnalysis> SignificantShortages { get; set; } = new();
    List<ProductShortageData>? shortagesByProduct { get; set; } = [];
    private int TotalShortages => AllShortages.Count(s => s.ShortageAmount > 0);
    private decimal AverageShortage => AllShortages.Any() ? AllShortages.Average(s => s.ShortageAmount) : 0;
    private int WithinToleranceCount => AllShortages.Count(s => s.VariancePercentage <= 0.29m);
    private decimal HighestShortage => AllShortages.Any() ? AllShortages.Max(s => s.ShortageAmount) : 0;

    // ApexCharts properties
    private ApexChartOptions<ProductShortageData> chartOptions = new();
    private List<Series<ProductShortageData>> series = new();

    private ApexChart<ProductShortageData>? chart;
    private bool IsBusy = false;

    protected override async Task OnInitializedAsync()
    {        
        await LoadShortagesData();
        await InitializeChart();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (HasParameterChanged())
        {
            await LoadShortagesData();
            await UpdateChart();
        }
    }

    private bool HasParameterChanged()
    {
        return true; // For simplicity, always reload when parameters change
    }

    private async Task LoadShortagesData()
    {
        IsBusy = true;
        try        
        {
            var filter = new ReportFilter { StartDate = StartDate, EndDate = StartDate};
            // Use existing endpoint to get trips by date range
            var trips = await TripService.GetTripsByDateRangeAsync(filter, AppState.GetCancellationToken());
            
            if (Product.HasValue)
            {
                trips = trips.Where(t => t.Truck?.Product == Product.Value).ToArray();
            }

            AllShortages = trips.Select(trip => new ShortageAnalysis
            {
                TripId = trip.Id,
                TruckNumber = trip.Truck?.TruckNo ?? "Unknown",
                Product = trip.Truck.Product.ToString(),
                LoadingQuantity = trip.LoadingInfo.Quantity ?? 0,
                DischargedQuantity = trip.Discharges?.Sum(d => d.QuantityDischarged) ?? 0,
                ShortageAmount = (trip.LoadingInfo.Quantity ?? 0) - (trip.Discharges?.Sum(d => d.QuantityDischarged) ?? 0),
                VariancePercentage = CalculateVariancePercentage(trip),
                TripDate = trip.Date
            }).Where(s => s.ShortageAmount > 0).ToList();

            SignificantShortages = AllShortages
                .OrderByDescending(s => s.VariancePercentage)
                .ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load shortages data: {ex.Message}");
        }    
        finally 
        {
            IsBusy = false;
        }
    }

    private async Task InitializeChart()
    {
        chartOptions = new ApexChartOptions<ProductShortageData>
        {
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = false,
                    ColumnWidth = "55%",
                    BorderRadius = 4
                }
            },
            DataLabels = new DataLabels { Enabled = false },
            Stroke = new Stroke
            {
                Show = true,
                Width = 2,
                Colors = new List<string> { "transparent" }
            },
            Xaxis = new XAxis
            {
                Categories = new List<string>(),
                Labels = new XAxisLabels
                {
                    Style = new AxisLabelStyle
                    {
                        Colors = new List<string> { "#6B7280" }, 
                        FontSize = "12px" 
                    }                    
                }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Title = new AxisTitle
                    {
                        Text = "Shortage Amount",
                        Style = new AxisTitleStyle
                        {
                            Color = "#6B7280", FontSize = "12px"
                        }
                    },
                    Labels = new YAxisLabels
                    {
                        
                        Style = new AxisLabelStyle { Colors = new List<string> { "#6B7280" }, FontSize = "12px" }
                    }
                }
            },
            Fill = new Fill { Opacity = 1 },
            Colors = new List<string> { "#EF4444", "#F97316" },
            Grid = new Grid
            {
                BorderColor = "#E5E7EB",
                StrokeDashArray = 4
            },
            Legend = new Legend
            {
                Position = LegendPosition.Top,
                HorizontalAlign = Align.Center,
                Labels = new LegendLabels { Colors = new List<string> { "#6B7280" } }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(val) {
                        return val.toFixed(2)
                    }"
                }
            }
        };
        chart.Options = chartOptions;
        await UpdateChart();
    }

    private async Task UpdateChart()
    {
        if (!AllShortages.Any()) return;

        shortagesByProduct = AllShortages
            .GroupBy(s => s.Product)
            .Select(g => new ProductShortageData
            {
                Product = g.Key,
                TotalShortage = (double)g.Sum(s => s.ShortageAmount),
                AverageShortage = (double)g.Average(s => s.ShortageAmount)
            })
            .OrderByDescending(x => x.TotalShortage)
            .ToList();

        // Update series
        @* series = new List<Seri   es<ProductShortageData>>
        {
            new Series<ProductShortageData>
            {
                Name = "Total Shortage",
                Data = shortagesByProduct.Select(x => new DataPoint<ProductShortageData> 
                { 
                    X = x.Product, 
                    Y = (decimal)x.TotalShortage
                })
            },
            new Series<ProductShortageData>
            {
                Name = "Average Shortage",
                Data = shortagesByProduct.Select(x => new DataPoint<ProductShortageData> 
                { 
                    X = x.Product, 
                    Y = (decimal)x.AverageShortage 
                })
            }
        }; *@

        // Update X-axis categories

        chartOptions.Xaxis.Categories = shortagesByProduct.Select(x => x.Product).ToList();        
        IsBusy = false;
        if (chart is not null)
        {            
            await chart.UpdateOptionsAsync(true, true, true);
            await chart.UpdateSeriesAsync(true);            
        }
        StateHasChanged();
    }

    private decimal CalculateVariancePercentage(Trip trip)
    {
        var loadingQty = trip.LoadingInfo.Quantity ?? 0;
        var dischargedQty = trip.Discharges?.Sum(d => d.QuantityDischarged) ?? 0;
        
        if (loadingQty == 0) return 0;
        
        var variance = Math.Abs(loadingQty - dischargedQty);
        return (variance / loadingQty) * 100;
    }

    private async Task ExportShortagesData()
    {
        try
        {
            var exportData = SignificantShortages.Select(s => new ShortageExportDto
            {
                TripId = s.TripId.ToString(),
                TruckNumber = s.TruckNumber,
                Product = s.Product,
                LoadingQuantity = s.LoadingQuantity,
                DischargedQuantity = s.DischargedQuantity,
                ShortageAmount = s.ShortageAmount,
                VariancePercentage = s.VariancePercentage,
                Status = GetShortageStatus(s.VariancePercentage),
                TripDate = s.TripDate.ToString("yyyy-MM-dd")
            }).ToList();

            await ExportService.ExportToCsv(exportData, $"ShortagesReport_{DateTime.Now:yyyyMMdd_HHmmss}.csv");
            ToastService.ShowSuccess("Shortages data exported successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to export shortages data: " + ex.Message);
        }
    }

    private string GetProductBadgeClass(string product)
    {
        return product switch
        {
            "PMS" => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "AGO" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "ATK" => "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
            "LPG" => "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300",
            "CNG" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private string GetShortageStatusBadgeClass(decimal variancePercentage)
    {
        return variancePercentage switch
        {
            <= 0.29m => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            <= 1.0m => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            _ => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"
        };
    }

    private string GetShortageStatus(decimal variancePercentage)
    {
        return variancePercentage switch
        {
            <= 0.29m => "Within Tolerance",
            <= 1.0m => "Minor Shortage",
            _ => "Significant Shortage"
        };
    }    
        
}