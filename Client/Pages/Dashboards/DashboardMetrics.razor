@inject IDashboardService DashboardService

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
    <!-- Total Trips Card -->
    <div class="bg-white p-6 rounded-lg shadow">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-gray-500 font-medium">Total Trips</h3>
                <p class="text-xs text-gray-400 mt-1">@TimeRangeLabel</p>
            </div>
            <i class="fas fa-truck text-blue-500 text-xl"></i>
        </div>
        <p class="text-3xl font-bold mt-2">@metrics?.TotalTrips</p>
        <div class="mt-2 text-sm @GetTrendClass(trends?.TotalTripsTrend)">
            <i class="@GetTrendIcon(trends?.TotalTripsTrend) mr-1"></i>
            @trends?.TotalTripsTrend%
        </div>
    </div>

    <!-- Active Trips Card -->
    <div class="bg-white p-6 rounded-lg shadow">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-gray-500 font-medium">Active Trips</h3>
                <p class="text-xs text-gray-400 mt-1">@TimeRangeLabel</p>
            </div>
            <i class="fas fa-spinner text-yellow-500 text-xl"></i>
        </div>
        <p class="text-3xl font-bold mt-2">@metrics?.ActiveTrips</p>
        <div class="mt-2 text-sm @GetTrendClass(trends?.ActiveTripsTrend)">
            <i class="@GetTrendIcon(trends?.ActiveTripsTrend) mr-1"></i>
            @trends?.ActiveTripsTrend%
        </div>
    </div>

    <!-- Completed Trips Card -->
    <div class="bg-white p-6 rounded-lg shadow">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-gray-500 font-medium">Completed Trips</h3>
                <p class="text-xs text-gray-400 mt-1">@TimeRangeLabel</p>
            </div>
            <i class="fas fa-check-circle text-green-500 text-xl"></i>
        </div>
        <p class="text-3xl font-bold mt-2">@metrics?.ClosedTrips</p>
        <div class="mt-2 text-sm @GetTrendClass(trends?.ClosedTripsTrend)">
            <i class="@GetTrendIcon(trends?.ClosedTripsTrend) mr-1"></i>
            @trends?.ClosedTripsTrend%
        </div>
    </div>

    <!-- Avg. Duration Card -->
    <div class="bg-white p-6 rounded-lg shadow">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-gray-500 font-medium">Avg. Duration</h3>
                <p class="text-xs text-gray-400 mt-1">@TimeRangeLabel</p>
            </div>
            <i class="fas fa-clock text-purple-500 text-xl"></i>
        </div>
        <p class="text-3xl font-bold mt-2">@(metrics?.AvgTripDurationDays.ToString("0.0")) days</p>
        <div class="mt-2 text-sm @GetTrendClass(trends?.AvgDurationTrend)">
            <i class="@GetTrendIcon(trends?.AvgDurationTrend) mr-1"></i>
            @trends?.AvgDurationTrend%
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DateOnly? StartDate { get; set; }

    [Parameter]
    public DateOnly? EndDate { get; set; }

    private DashboardMetricsDto? metrics;
    private MetricsTrendDto? trends;
    private string TimeRangeLabel => GetTimeRangeLabel();

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        metrics = await DashboardService.GetMetricsAsync(StartDate, EndDate);
        trends = await DashboardService.GetMetricsTrendsAsync(StartDate, EndDate);
    }

    private string GetTimeRangeLabel()
    {
        if (!StartDate.HasValue || !EndDate.HasValue)
            return "All time";

        var diff = (EndDate.Value.ToDateTime(TimeOnly.MinValue) - StartDate.Value.ToDateTime(TimeOnly.MinValue)).TotalDays;

        return diff switch
        {
            <= 7 => "This week",
            <= 14 => "Last week",
            <= 31 => "This month",
            <= 62 => "Last month",
            _ => $"{StartDate:MMM dd} - {EndDate:MMM dd}"
        };
    }

    private string GetTrendClass(decimal? trend)
    {
        if (!trend.HasValue) return "text-gray-500";
        return trend.Value >= 0 ? "text-green-500" : "text-red-500";
    }

    private string GetTrendIcon(decimal? trend)
    {
        if (!trend.HasValue) return "fas fa-minus";
        return trend.Value >= 0 ? "fas fa-arrow-up" : "fas fa-arrow-down";
    }
}