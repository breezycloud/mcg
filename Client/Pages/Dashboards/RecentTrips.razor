@inject IDashboardService DashboardService

<div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
    <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Recent Trips</h3>
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Truck</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Product</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Duration</th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                @foreach (var trip in recentTrips)
                {
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-gray-100">@trip.TruckNumber</td>
                        <td class="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-gray-100">@trip.Product</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="@GetStatusBadgeClass(trip.Status)">
                                @trip.Status
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-gray-100">@(trip.TripDurationDays?.ToString() ?? "N/A") days</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<RecentTripDto> recentTrips = new();
    [Parameter]
    public DateOnly? StartDate { get; set; }

    [Parameter]
    public DateOnly? EndDate { get; set; }
    [Parameter]
    public ProductFilter Product { get; set; } = ProductFilter.All;

    protected override async Task OnParametersSetAsync()
    {
        recentTrips = await DashboardService.GetRecentTripsAsync(5, StartDate, EndDate, Product.ToString());
        StateHasChanged();
    }

    private string GetStatusBadgeClass(TripStatus status)
    {
        return status switch
        {
            TripStatus.Active => "px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800",
            TripStatus.Closed => "px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800",
            _ => "px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800"
        };
    }
}