@page "/dashboard"
@using Client.Pages.Products

@inject IDashboardService DashboardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

<div class="p-1 sm:p-1 space-y-6 bg-gray-50 dark:bg-gray-900">
    <!-- Header with SignalR status -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-2xl font-bold text-gray-800 dark:text-white">Dashboard</h1>
            @* <span class="text-sm @(isConnected ? "text-green-500" : "text-red-500")">
                @(isConnected ? "● Live" : "● Disconnected")
            </span> *@
        </div>
    </div>
    
    <!-- Time Filter -->
    <Filter OnFilterChanged="HandleTimeFilterChange" />
    <div class="flex flex-col md:flex-row justify-between items-center mb-4">
        <div class="w-full md:w-1/3">
            <ProductSelector OnProductSelected="HandleProductChanged" />
        </div>
    </div>
    <!-- Dashboard content -->
    <DashboardMetrics StartDate="@filterStartDate" EndDate="@filterEndDate" Product="@selectedProduct" />

    <!-- Charts & Recent Trips -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div class="lg:col-span-2">
            <TripStatusChart Product="@selectedProduct" />
        </div>
        <div class="lg:col-span-1">
            <RecentTrips StartDate="@filterStartDate" EndDate="@filterEndDate" Product="@selectedProduct"/>
        </div>
    </div>

    <!-- Product Shipments Table -->
    <ProductShipments StartDate="@filterStartDate" EndDate="@filterEndDate" Product="@selectedProduct" />
</div>

@code {
    private HubConnection? hubConnection;
    private bool isConnected;
    private DateOnly? filterStartDate;
    private DateOnly? filterEndDate;
    private ProductFilter selectedProduct;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private void HandleProductChanged(ProductFilter product)
    {
        // Handle product selection change
        // This could involve filtering data or updating the UI
        selectedProduct = product;
        Console.WriteLine($"Selected Product: {product}");
        StateHasChanged();
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/tripsHub"))
            .Build();

        hubConnection.On<string>("ReceiveTripUpdate", message =>
        {
            InvokeAsync(StateHasChanged); // Refresh UI on updates
        });

        try
        {
            await hubConnection.StartAsync();
            isConnected = true;
        }
        catch
        {
            isConnected = false;
        }
    }

    private void HandleTimeFilterChange((DateOnly Start, DateOnly End) dates)
    {
        filterStartDate = dates.Start;
        filterEndDate = dates.End;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
