@* @using ChartJs.Blazor
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.PieChart *@
@using ApexCharts
@inject IDashboardService DashboardService

<div class="bg-white p-6 rounded-lg shadow">
    <h3 class="text-lg font-semibold mb-4">Trip Status Distribution</h3>
   <ApexChart TItem="TripStatusDto" 
             Options="@options"
             Height="350">

        <ApexPointSeries TItem="TripStatusDto"
                         Items="Data"
                         SeriesType="SeriesType.Pie"
                         XValue="@(e => e.Status.ToString())"
                         YAggregate="@(e => e.Sum(e => e.Count))"
                         OrderByDescending="e=>e.Y" 
                         PointColor="e=> GetPointColor(e.Status)" ShowDataLabels/>
    </ApexChart>
</div>

@code {
    private List<TripStatusDto> Data { get; set; } = new();
    private TripStatusDistributionDto StatusData { get; set; } = new();
    private ApexChart<TripStatusDistributionDto>? chart;
    private ApexChartOptions<TripStatusDto> options { get; set; } = new();
    private List<int> Series => new() { StatusData.Active, StatusData.Closed, StatusData.Overdue };
    private List<string> Labels => new() { "Active", "Closed", "Overdue" };

        
    protected override async Task OnInitializedAsync()
    {
        
        var statusData = await DashboardService.GetTripStatusDistributionAsync();
        if (statusData == null)
        {
            StatusData = new();
        }
        else
        {
            Data.AddRange([
                new TripStatusDto
                {
                    Status = TripStatus.Active,
                    Count = statusData.Active
                },
                new TripStatusDto
                {
                    Status = TripStatus.Closed,
                    Count = statusData.Closed
                }               
            ]);
        }
       options.DataLabels = new DataLabels { DropShadow = new DropShadow { Enabled = false } };       
    }

    private string GetPointColor(TripStatus status)
    {   
        switch (status)
        {
            case TripStatus.Active:
                return "#28a745"; // Green
            case TripStatus.Closed:
                return "#007bff"; // Blue
            case TripStatus.Overdue:
                return "#dc3545"; // Red
            default:
                return "#6c757d"; // Gray
        }
    }        
}