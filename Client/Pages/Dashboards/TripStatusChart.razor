@using ApexCharts
@inject IDashboardService DashboardService
@implements IDisposable

@if (IsLoading)
{
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow">
        <div class="skeleton w-48 h-6 mb-4 rounded"></div>
        <div class="skeleton w-full h-64 rounded"></div>
    </div>
}
else
{
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Trip Monthly Distribution</h3>
        <ApexChart @ref="chart" TItem="TripMonthlySummaryDto" 
                Options="@options"
                Height="350">

            <ApexPointSeries TItem="TripMonthlySummaryDto"
                    Items="Data"
                    SeriesType="SeriesType.Bar"
                    Name="Monthly Trips"
                    XValue="@(e => e.Format)"
                    YValue="@(e => e.TotalTrips)"
                    ShowDataLabels="true" />
        </ApexChart>
    </div>
}

@code {
    private List<TripMonthlySummaryDto> Data { get; set; } = new();
    private TripMonthlySummaryDto StatusData { get; set; } = new();
    private ApexChart<TripMonthlySummaryDto>? chart = new();
    private ApexChartOptions<TripMonthlySummaryDto> options { get; set; } = new();
    [Parameter]
    public ProductFilter Product { get; set; } = ProductFilter.All;    
    private bool IsLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        AppState.FilterChanged += OnFilterChanged!;
        await LoadData();    
    }

    private async Task LoadData()
    {
        IsLoading = true;
        var statusData = await DashboardService.GetTripMonthlySummaries(Product.ToString());
        if (statusData == null)
        {
            StatusData = new();
        }
        else
        {
            Data = statusData;
        }
       options.DataLabels = new DataLabels { DropShadow = new DropShadow { Enabled = false } };
       StateHasChanged();
       if (chart is not null)
       {
            Console.WriteLine("{0} {1}", "My Chart", chart);
            @* await chart.UpdateSeriesAsync(true); *@
       }
       IsLoading = false;
    }

    private async void OnFilterChanged(object sender, EventArgs args)
    {
        await LoadData();
    }

    private string GetPointColor(TripStatus status)
    {   
        switch (status)
        {
            case TripStatus.Active:
                return "#28a745"; // Green
            case TripStatus.Closed:
                return "#007bff"; // Blue
            case TripStatus.Overdue:
                return "#dc3545"; // Red
            default:
                return "#6c757d"; // Gray
        }
    }   

    public void Dispose()
    {
        AppState.FilterChanged -= OnFilterChanged!;
    }     
}