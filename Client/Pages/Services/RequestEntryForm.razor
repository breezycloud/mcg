@page "/requests/{Action}/{Id:guid?}"
@inject IRequestService RequestService
@inject IMaintenanceService SiteService
@inject IDriverService DriverService
@inject ITruckService TruckService
@inject ITripService TripService

<div class="max-w-2xl mx-auto p-4 sm:p-6">
    @if (AppState.IsBusy)
    {
        <Loader/>
    }
   else
   {
         <!-- Form Header -->
    <div class="mb-6">
        <h2 class="text-xl font-bold text-gray-900 dark:text-white">@(EditMode ? "Edit Request" : "Add New Request")</h2>
        <p class="text-sm text-gray-500 dark:text-gray-400">Please fill in the request details below</p>
    </div>

    <!-- Request Form -->
    <EditForm Model="@CurrentRequest" OnValidSubmit="HandleSubmit" class="space-y-6">

        @if (alert is not null)
        {
            <Toast Icon="@alert.Icon" Message="@alert.Message"/>
        }

        <!-- Service Type & Service Item in one row -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Service Type -->
            <div>
                <label for="type" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Service Type <span class="text-red-500">*</span>
                </label>
                <InputSelect id="type" @bind-Value="CurrentRequest.Type" class="@GetInputClass("Type")">
                    <option value="">Select type</option>
                    @foreach (var type in Enum.GetValues<ServiceType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                @if (errors.ContainsKey("Type"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Type"]</p>
                }
            </div>

            <!-- Service Item -->
            <div>
                <label for="item" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Request Item <span class="text-red-500">*</span>
                </label>
                <InputSelect id="item" @bind-Value="CurrentRequest.Item" class="@GetInputClass("Item")">
                    <option value="">Select item</option>
                    @foreach (var item in Enum.GetValues<ServiceItem>())
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                @if (errors.ContainsKey("Item"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Item"]</p>
                }
            </div>
        </div>

        <!-- Truck -->
        <div>
            <label for="truck" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                Truck @(CurrentRequest.Trip is not null ? $"(Active Trip: {CurrentRequest.Trip?.DispatchId})" : "")
            </label>
            <InputSelect id="truck" @bind-Value="CurrentRequest.TruckId" class="@GetInputClass("TruckId")"
                    @bind-Value:after="OnTruckChanged">
                <option value="">Select truck</option>
                @if (Trucks is not null)
                {
                    @foreach (var truck in Trucks)
                    {
                        <option value="@truck.Id">@truck.LicensePlate</option>
                    }
                }
            </InputSelect>
            @if (errors.ContainsKey("TruckId"))
            {
                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["TruckId"]</p>
            }
        </div>

        @* @if (CurrentRequest.Item == ServiceItem.Driver)
        {
            <!-- Driver -->
            <div>
                <label for="driver" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Driver <span class="text-red-500">*</span>
                </label>
                <InputSelect id="driver" @bind-Value="CurrentRequest.DriverId" class="@GetInputClass("DriverId")">
                    <option value="">Select Drvier</option>
                    @if (Drivers is not null)
                    {
                        @foreach (var driver in Drivers)
                        {
                            <option value="@driver.Id">@driver.ToString()</option>
                        }
                    }
                </InputSelect>
                @if (errors.ContainsKey("DriverId"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DriverId"]</p>
                }
            </div>
        } *@

        <!-- Description -->
        <div>
            <label for="description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                Description <span class="text-red-500">*</span>
            </label>
            <InputTextArea id="description" @bind-Value="CurrentRequest.Description"
                class="@GetInputClass("Description")"
                placeholder="Describe the request..." rows="3"/>
            @if (errors.ContainsKey("Description"))
            {
                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Description"]</p>
            }
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Maintenance Site -->        
            <div>
                <label for="maintenanceSite" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Maintenance Site
                </label>
                <InputSelect id="maintenanceSite" @bind-Value="CurrentRequest.MaintenanceSiteId" class="@GetInputClass("MaintenanceSiteId")">
                    <option value="">Select site</option>
                    @if (Sites is not null)
                    {
                        @foreach (var site in Sites)
                        {
                            <option value="@site.Id">@site.Name</option>
                        }
                    }
                </InputSelect>
                @if (errors.ContainsKey("MaintenanceSiteId"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["MaintenanceSiteId"]</p>
                }
            </div>

            <!-- Cost -->
            <div>
                <label for="cost" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Cost <span class="text-red-500">*</span>
                </label>
                @* <div class="flex flex-col items-end">                    
                </div> *@
                <InputNumber id="cost" @bind-Value="CurrentRequest.Cost" class="@(GetInputClass("Cost"))" min="0" step="0.01" />
                @if (errors.ContainsKey("Cost"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500 text-right">@errors["Cost"]</p>
                }
            </div>
        </div>
        <!-- Dates (Display only when editing) -->
        @if (EditMode)
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                        Created At
                    </label>
                    <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                        @CurrentRequest.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                    </div>
                </div>
                <div>
                    <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                        Treated At
                    </label>
                    <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                        @(CurrentRequest.TreatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Not yet")
                    </div>
                </div>
                <div>
                    <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                        Closed At
                    </label>
                    <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                        @(CurrentRequest.ClosedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Not yet")
                    </div>
                </div>
            </div>
        }

        <!-- Form Actions -->
        <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
            <button type="button" @onclick="Cancel"
                class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">
            Cancel
            </button>
            <button type="submit"
                    class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 flex items-center justify-center min-w-[120px]"
                    disabled="@AppState.IsProcessing">
                    @if (AppState.IsProcessing)
                    {
                        <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                        </svg>
                        @("Processing...")
                    }
                    else
                    {
                        @(EditMode ? "Update Request" : "Add Request")
                    }
                </button>           
        </div>
    </EditForm>    
   }
</div>

@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public ServiceRequest CurrentRequest { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    bool result = false;
    private NotificationAlert? alert = null;
    private Dictionary<string, string> errors = new();
    private Truck[]? Trucks;
    private Driver[]? Drivers;
    private MaintenanceSite[]? Sites;

    protected override async Task OnInitializedAsync()
    {
        // Load trucks and sites here
        AppState.IsBusy = true;
        if (Id.HasValue)
        {
            CurrentRequest = await RequestService.GetAsync(Id.Value, AppState.GetCancellationToken()) ?? new();
            EditMode = true;
        }
        Drivers = await DriverService.GetAsync(AppState.GetCancellationToken());
        Trucks = await TruckService.GetAsync(AppState.GetCancellationToken());
        Sites = await SiteService.GetAsync(AppState.GetCancellationToken());
        AppState.IsBusy = false;
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        if (fieldName == "Cost")
            baseClass += "text-right";

        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields
        if (CurrentRequest.TruckId.Equals(Guid.Empty) || CurrentRequest.TruckId is null)
        {
            errors["TruckId"] = "Truck is required";
        }
        if (CurrentRequest.MaintenanceSiteId.Equals(Guid.Empty) || CurrentRequest.TruckId is null)
        {
            errors["MaintenanceSiteId"] = "Maintenance Site is required";
        }
        if (Id.HasValue && CurrentRequest.Cost is null)
        {
            errors["Cost"] = "Cost is required";
        }
        if (string.IsNullOrWhiteSpace(CurrentRequest.Description))
        {
            errors["Description"] = "Description is required";
        }

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }
                
        try
        {
            CurrentRequest!.Description = StringConverter.ConvertToTitleCase(CurrentRequest!.Description!);
            Guid userId = await localStorage.GetItemAsync<Guid>("uid");
            if (!Id.HasValue)
            {
                CurrentRequest.CreatedById = userId;
                result = await RequestService.AddAsync(CurrentRequest, AppState.GetCancellationToken());
            }
            else
            {
                CurrentRequest.TreatedById = userId;
                result = await RequestService.UpdateAsync(CurrentRequest, AppState.GetCancellationToken());
            }
          
            if (result)
            {
                ToastService.ShowSuccess($"Request Successfully {(EditMode ? "Updated" : "Added")}", 5);
                 Cancel();
            }          
        }
        catch (Exception ex)
        {
            alert = new($"Operation failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    private async Task OnTruckChanged()
    {
        if (CurrentRequest.TruckId is not null && CurrentRequest.TruckId != Guid.Empty)
        {
            var truck = Trucks?.FirstOrDefault(t => t.Id == CurrentRequest.TruckId);
            if (truck != null)
            {
                CurrentRequest.Truck = truck;
                CurrentRequest.DriverId = truck.DriverId; // Automatically set driver if truck has one
                var trip = await TripService.GetActiveTripForTruckAsync(truck.Id, AppState.GetCancellationToken());
                if (trip != null)
                {
                    CurrentRequest.TripId = trip.Id;
                    CurrentRequest.Trip = trip;
                }
                else
                {
                    CurrentRequest.TripId = null; // Clear trip if no active trip found
                    CurrentRequest.Trip = null;
                }
            }
        }
        else
        {
            CurrentRequest.Truck = null;
            CurrentRequest.DriverId = null; // Clear driver if no truck selected
        }        
        StateHasChanged();
    }
    
    private void Cancel()
    {
        nav.NavigateTo("requests");
    }
}