@page "/requests/{id:guid}"
@using System.Text
@inject IRequestService ServiceRequestService


<div class="max-w-4xl mx-auto p-4 sm:p-6">
    @if (serviceRequest == null)
    {
        <div class="text-center py-8">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h3 class="mt-2 text-lg font-medium text-gray-900 dark:text-white">Service request not found</h3>
            <p class="mt-1 text-gray-500 dark:text-gray-400">The requested service request could not be loaded.</p>
            <div class="mt-6">
                <button @onclick="@(()=> nav.NavigateTo("/requests"))" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Back to requests
                </button>
            </div>
        </div>
    }
    else    
    {
        <!-- Header -->
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
            <div>
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Service Request #@serviceRequest.Id.ToString().Substring(0, 8)</h1>
                <div class="flex items-center mt-2">
                    <span class="@GetStatusBadgeClass(serviceRequest.Status) text-xs font-medium px-2.5 py-0.5 rounded-full mr-2">
                        @(StringConverter.ToDescription(serviceRequest.Status))
                    </span>
                    <span class="text-sm text-gray-500 dark:text-gray-400">
                        Created @serviceRequest.CreatedAt.ToString("g")
                    </span>
                </div>
            </div>
            <div class="flex space-x-2">
               <button @onclick="NavigateToList"
                        class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-700 dark:hover:bg-blue-800 dark:focus:ring-blue-800">
                    Back to List
                </button>

            </div>
        </div>

        <!-- Main Card -->
        <div class="bg-white shadow rounded-lg divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
            <!-- Request Details -->
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Request Information</h3>
                        <div class="space-y-4">
                            <div>
                                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Service Type</p>
                                <p class="text-gray-900 dark:text-white">@serviceRequest.Type</p>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Service Item</p>
                                <p class="text-gray-900 dark:text-white">@serviceRequest.Item</p>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Description</p>
                                <p class="text-gray-900 dark:text-white">@serviceRequest.Description</p>
                            </div>
                        </div>
                    </div>
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Related Information</h3>
                        <div class="space-y-4">
                            <div>
                                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Truck</p>
                                <p class="text-gray-900 dark:text-white">
                                    @(serviceRequest.Truck != null ? $"{serviceRequest.Truck.LicensePlate} - {serviceRequest.Truck.Manufacturer}" : "Not assigned")
                                </p>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Maintenance Site</p>
                                <p class="text-gray-900 dark:text-white">
                                    @(serviceRequest.MaintenanceSiteId.HasValue ? "Site #" + " " + serviceRequest.Site?.Name : "Not specified")
                                </p>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Created By</p>
                                <p class="text-gray-900 dark:text-white">
                                    @(serviceRequest.CreatedBy != null ? $"{serviceRequest.CreatedBy.FirstName} {serviceRequest.CreatedBy.LastName}" : "Unknown")
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Status Timeline -->
            <div class="p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Status Timeline</h3>
                <div class="flow-root">
                    <ul class="-mb-8">
                        <li>
                            <div class="relative pb-10">
                                <span class="absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700" aria-hidden="true"></span>
                                <div class="relative flex space-x-3">
                                    <div>
                                        <span class="h-8 w-8 rounded-full bg-green-500 flex items-center justify-center ring-8 ring-white dark:ring-gray-800">
                                            <svg class="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                        </span>
                                    </div>
                                    <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                        <div>
                                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                                Created by <span class="font-medium text-gray-900 dark:text-white">@(serviceRequest.CreatedBy?.ToString() ?? "System")</span>
                                            </p>
                                        </div>
                                        <div class="text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-400">
                                            <time datetime="@serviceRequest.CreatedAt.ToString("o")">@serviceRequest.CreatedAt.ToString("g")</time>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </li>
                        @if (serviceRequest.TreatedAt.HasValue)
                        {
                            <li>
                                <div class="relative pb-10">
                                    <span class="absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700" aria-hidden="true"></span>
                                    <div class="relative flex space-x-3">
                                        <div>
                                            <span class="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white dark:ring-gray-800">
                                                <svg class="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z"></path>
                                                </svg>
                                            </span>
                                        </div>
                                        <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                            <div>
                                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                                    Treated by <span class="font-medium text-gray-900 dark:text-white">@(serviceRequest.TreatedBy?.ToString() ?? "Technician")</span>
                                                </p>
                                            </div>
                                            <div class="text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-400">
                                                <time datetime="@serviceRequest.TreatedAt.Value.ToString("o")">@serviceRequest.TreatedAt.Value.ToString("g")</time>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }

                        @if (serviceRequest.ClosedAt.HasValue)
                        {
                            <li>
                                <div class="relative pb-10">
                                    <div class="relative flex space-x-3">
                                        <div>
                                            <span class="h-8 w-8 rounded-full bg-purple-500 flex items-center justify-center ring-8 ring-white dark:ring-gray-800">
                                                <svg class="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                                </svg>
                                            </span>
                                        </div>
                                        <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                            <div>                                                
                                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                                    Closed by <span class="font-medium text-gray-900 dark:text-white">@(serviceRequest.ClosedBy?.ToString() ?? "System")</span>
                                                </p>
                                            </div>
                                            <div class="text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-400">
                                                <time datetime="@serviceRequest.ClosedAt.Value.ToString("o")">@serviceRequest.ClosedAt.Value.ToString("g")</time>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Notes Section -->
            @if (!string.IsNullOrEmpty(serviceRequest.Notes))
            {
                <div class="p-6">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Technician Notes</h3>
                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                        <p class="text-gray-700 dark:text-gray-300">@serviceRequest.Notes</p>
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="p-6">
                @if (serviceRequest.Status == RequestStatus.Pending)
                {
                    <div class="flex justify-end space-x-3">
                        <button @onclick="StartTreatment" 
                                class="px-4 py-2 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                            Start Treatment
                        </button>
                    </div>
                }
                else if (serviceRequest.Status == RequestStatus.InProgress)
                {
                    <div class="flex justify-end space-x-3">
                        <button @onclick="ShowCloseRequestModal" 
                                class="px-4 py-2 text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 dark:bg-green-600 dark:hover:bg-green-700 focus:outline-none dark:focus:ring-green-800">
                            Complete Request
                        </button>
                        <button @onclick="ShowAddNotesModal" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600">
                            Add Notes
                        </button>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Close Request Modal -->
    @if (showCloseRequestModal)
    {
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg shadow dark:bg-gray-800 w-full max-w-lg mx-auto">
                <div class="p-6">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Complete Service Request</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Notes</label>
                            <textarea @bind="closeRequestNotes" 
                                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                                      rows="3" 
                                      placeholder="Any final notes about the service..."></textarea>
                        </div>
                    </div>
                </div>
                <div class="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-3">
                    <button @onclick="CloseCloseRequestModal" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600">
                        Cancel
                    </button>
                    <button @onclick="CompleteRequest" 
                            class="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 dark:bg-green-600 dark:hover:bg-green-700">
                        Confirm Completion
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Add Notes Modal -->
    @if (showAddNotesModal)
    {
       <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg shadow dark:bg-gray-800 w-full max-w-lg mx-auto">
                <div class="p-6">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Add Technician Notes</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Notes</label>
                            <textarea @bind="technicianNotes" 
                                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                                      rows="5" 
                                      placeholder="Describe the work performed..."></textarea>
                        </div>
                    </div>
                </div>
                <div class="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-3">
                    <button @onclick="CloseAddNotesModal" 
                            class="mdl-secondary">
                        Cancel
                    </button>
                    <button @onclick="SaveNotes" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700">
                        Save Notes
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private ServiceRequest? serviceRequest;
    private bool showCloseRequestModal = false;
    private bool showAddNotesModal = false;
    private string closeRequestNotes = string.Empty;
    private string technicianNotes = string.Empty;
    private StringBuilder? notesBuilder = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServiceRequest();
    }

    private async Task LoadServiceRequest()
    {
        serviceRequest = await ServiceRequestService.GetAsync(Id, AppState.GetCancellationToken());
    }

    private string GetStatusBadgeClass(RequestStatus status)
    {
        return status switch
        {
            RequestStatus.Pending => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            RequestStatus.InProgress => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            RequestStatus.Treated => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            RequestStatus.Closed => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }


    private async Task StartTreatment()
    {
        if (serviceRequest != null)
        {
            serviceRequest.Status = RequestStatus.InProgress;
            serviceRequest.TreatedById = await localStorage.GetItemAsync<Guid>("uid");
            serviceRequest.TreatedAt = DateTimeOffset.UtcNow;
            await ServiceRequestService.UpdateAsync(serviceRequest, AppState.GetCancellationToken());
            await LoadServiceRequest();
            StateHasChanged();
        }
    }

    private void ShowCloseRequestModal()
    {
        showCloseRequestModal = true;
    }

    private void CloseCloseRequestModal()
    {
        showCloseRequestModal = false;
        closeRequestNotes = string.Empty;
    }

    private async Task CompleteRequest()
    {
        if (serviceRequest != null)
        {
            serviceRequest.ClosedById = await localStorage.GetItemAsync<Guid>("uid");
            serviceRequest.ClosedAt = DateTimeOffset.UtcNow;
            if (!string.IsNullOrWhiteSpace(serviceRequest.Notes))
            {
                serviceRequest.Notes += "\n";
            }
            serviceRequest.Notes += closeRequestNotes;
            serviceRequest.Status= RequestStatus.Closed;
            await ServiceRequestService.UpdateAsync(serviceRequest, AppState.GetCancellationToken());
            StateHasChanged();
        }
    }

    private void ShowAddNotesModal()
    {
        technicianNotes = serviceRequest?.Notes ?? string.Empty;
        showAddNotesModal = true;
    }

    private void CloseAddNotesModal()
    {
        showAddNotesModal = false;
        technicianNotes = string.Empty;
    }

    private async Task SaveNotes()
    {
        if (serviceRequest != null)
        {
            if (!string.IsNullOrWhiteSpace(serviceRequest.Notes))
            {
                notesBuilder?.AppendLine(serviceRequest.Notes);
                serviceRequest.Notes += "\n";
            }
            serviceRequest.Notes += technicianNotes;
            serviceRequest.TreatedAt = DateTimeOffset.UtcNow;
            await ServiceRequestService.UpdateAsync(serviceRequest, AppState.GetCancellationToken());
            await LoadServiceRequest();
            showAddNotesModal = false;
            StateHasChanged();
        }
    }

    private void NavigateToList()
    {
        nav.NavigateTo("/requests");
    }
}