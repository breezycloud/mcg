@page "/sites"
@inject IMaintenanceService MaintenanceService

<PageTitle>Maintenance Centres</PageTitle>


<section class="bg-gray-50 dark:bg-gray-900 rounded-lg">
    <div class="px-4 lg:px-12">
        <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
            <!-- Header with search and add button -->
             <div class="flex flex-col items-center justify-between p-4 space-y-3 md:flex-row md:space-y-0 md:space-x-4">
                <div class="w-full flex-auto">
                    <label for="centre-search" class="sr-only">Search centres</label>
                    <div class="relative w-full">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <input 
                            type="text" 
                            id="centre-search" 
                            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                            placeholder="Search centres..."                             
                            @bind-value="@request.SearchTerm" @bind-value:event="oninput" @onkeyup="async () => await HandleSearch(request.SearchTerm!)"/>
                    </div>
                </div>
                <div class="flex flex-col items-stretch justify-end flex-shrink-0 w-full space-y-2 md:w-auto md:flex-row md:space-y-0 md:items-center md:space-x-3">
                    <button 
                        @onclick="AddMaintenance" 
                        type="button" 
                        class="flex items-center justify-center text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                            <path clip-rule="evenodd" fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" />
                        </svg>
                        Add Centre
                    </button>
                </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto">
                <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3">Centre</th>
                            <th scope="col" class="px-6 py-3">Location</th>
                            <th scope="col" class="px-6 py-3">Address</th>
                            <th scope="col" class="px-6 py-3">Dates</th>
                            <th scope="col" class="px-6 py-3 text-right">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @if (response != null && response.Data!.Any())
                    {
                        foreach (var centre in response.Data!)
                        {
                            <tr class="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                <td class="px-6 py-4">
                                    <div class="font-medium text-gray-900 dark:text-white">@centre.Name</div>
                                    @* <div class="text-xs text-gray-500">ID: @centre.Id</div> *@
                                </td>

                                <td class="px-6 py-4">
                                    <div class="text-sm">@centre.Location</div>
                                    <div class="text-xs text-gray-500">State: @centre.State</div>
                                </td>

                                <td class="px-6 py-4">
                                    @if (centre.Address != null)
                                    {
                                        <div class="text-sm">@centre.Address.ContactAddress</div>
                                        @* <div class="text-xs text-gray-500">@centre.Address.City, @centre.Address.State, @centre.Address.Country</div> *@
                                    }
                                    else
                                    {
                                        <span class="text-sm italic text-gray-500">No address provided</span>
                                    }
                                </td>

                                <td class="px-6 py-4">
                                    <div class="text-sm">Created: @centre.CreatedAt.ToString("MMM dd, yyyy")</div>
                                    <div class="text-xs text-gray-500">Updated: @(centre.UpdatedAt?.ToString("MMM dd, yyyy") ?? "Never")</div>
                                </td>

                                <td class="px-6 py-4 text-right">
                                    <div class="flex justify-end space-x-3">
                                        <button 
                                            @onclick="() => EditMaintenance(centre.Id)" 
                                            class="font-medium text-gray-600 dark:text-gray-400 hover:underline">
                                            Edit
                                        </button>                                        
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
                                @if (AppState.IsBusy)
                                {
                                    <div class="flex justify-center items-center">
                                        <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        Loading centres...
                                    </div>
                                }
                                else
                                {
                                    <div class="flex flex-col items-center justify-center py-6">
                                        <svg class="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        <span class="text-lg font-medium">No centres found</span>
                                        <p class="text-sm text-gray-500 mt-1">Try adjusting your search or add a new centre</p>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="p-4 border-t border-gray-200 dark:border-gray-700">
                <Pagination             
                    CurrentPage="request.Page + 1"
                    PageSize="request.PageSize"
                    TotalItems="response?.Total ?? 0"
                    OnPageChanged="async (page) => { 
                        request.Page = page - 1; 
                        await LoadMaintenances(); 
                        StateHasChanged(); 
                    }" />
            </div>
        </div>
    </div>
</section>


@code {
    private GridDataResponse<MaintenanceSite>? response = null;
    private GridDataRequest request = new();

    

    protected override async Task OnInitializedAsync()
    {
        request = new GridDataRequest { Page = 0, PageSize = 10};
        await LoadMaintenances();
    }

   private async Task HandleSearch(string search)
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            request.SearchTerm = string.Empty;
        }
        else
            request.SearchTerm = search;
        request.Page = 0; // Reset to first page when searching
        await LoadMaintenances();
    }
    
    private async Task LoadMaintenances()
    {
        AppState.IsBusy = true;
        try 
        {
            response = await MaintenanceService.GetPagedAsync(request, AppState.GetCancellationToken());
        }
        finally
        {
            AppState.IsBusy = false;
        }
        StateHasChanged();
    }

    private void AddMaintenance()
    {
        nav.NavigateTo("/sites/add");
    }

    private void EditMaintenance(Guid id)
    {
        nav.NavigateTo($"/sites/edit/{id}");
    }

    private async Task DeleteMaintenance(Guid id)
    {
        await MaintenanceService.DeleteAsync(id, AppState.GetCancellationToken());
        response = await MaintenanceService.GetPagedAsync(request, AppState.GetCancellationToken());
    }
} 
