@layout LoginLayout
@page "/"
@using Shared.Enums
@inject IAuthService AuthService
@inject ToastService Toast


@* @if (!string.IsNullOrEmpty(loginResponse!.Message))
{
    <Alerts Title="Error" Dismissible Type="AlertType.Error">
        @loginResponse.Message
    </Alerts>
} *@
<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <section class="bg-gray-50 dark:bg-gray-900 min-h-screen flex items-center justify-center">
        <div class="flex flex-col items-center justify-center px-4 py-8 w-lg">
                <a href="#" class="flex items-center mb-6 text-2xl font-semibold text-gray-900 dark:text-white">
                        <img class="w-8 h-8 mr-2" src="https://flowbite.s3.amazonaws.com/blocks/marketing-ui/logo.svg" alt="logo">
                        MCG    
                </a>

                <div class="w-90 bg-white rounded-lg shadow dark:border md:mt-0 xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                        <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                                <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                                        Sign in to your account
                                </h1>
                                <div class="space-y-4 md:space-y-6">
                                    <div>
                                        <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your email</label>
                                        <InputText @bind-Value="Model.Email" type="email" name="email" id="email"
                                            class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                            placeholder="name@company.com" />
                                        <ValidationMessage For="@(() => Model.Email)" />
                                    </div>
                                    <div>
                                        <label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
                                        <InputText @bind-Value="Model.HashedPassword" type="password" name="password" id="password"
                                            placeholder="••••••••"
                                            class="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                                        <ValidationMessage For="@(() => Model.HashedPassword)" />
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-start">
                                                @* <div class="flex items-center h-5">
                                                        <input id="remember" aria-describedby="remember" type="checkbox" class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800" required="">
                                                </div>
                                                <div class="ml-3 text-sm">
                                                        <label for="remember" class="text-gray-500 dark:text-gray-300">Remember me</label>
                                                </div> *@
                                        </div>
                                        <a href="#" class="text-sm font-medium text-blue-600 hover:underline">Forgot password?</a>
                                    </div>
                                    <button type="submit" disabled="@AppState.IsProcessing" class="w-full text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Sign in</button>
                                </div>
                        </div>
                </div>  
        </div>
    </section>
</EditForm>



@code {
    private LoginModel Model { get; set; } = new();
    [CascadingParameter] public Task<AuthenticationState>? authenticationState { get; set; }
    private LoginResponse? loginResponse = null;

    

    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await authenticationState!;
        var isAuthenticated = userAuthenticationState.User;
        if (isAuthenticated.Identity!.IsAuthenticated)        
            nav.NavigateTo("/dashboard");        
    }



    private async Task OnValidSubmit()
    {
        AppState.IsProcessing = true;
        try
        {
            var response = await AuthService.Login(Model, AppState.GetCancellationToken());
            if (response is null)
            {
                response!.Message = "Invalid login credentials";                
            }
            else
            {                
                await CustomAuthenticationProvider.SetTokenAsync(response);

                var userRole = response.Role;
                var path = Path(userRole);                
                nav.NavigateTo(path, true);
            }
        }
        catch
        {
            @* snackBar.Add("Invalid login credentials", Severity.Error, option =>
            {
                option.CloseAfterNavigation = true;
            }); *@
        }
        finally 
        {
            AppState.IsProcessing = false;
        }
    }
    
    string Path(UserRole userRole)
    {        
        string url = userRole switch
        {
            UserRole.Supervisor => "/trucks",
            UserRole.Maintenance => "/requests",
            UserRole.Monitoring => "/trips",
            _ => "/dashboard"
        };       
        return url;
    }
}