@page "/trips/batch-dispatch"
@inject ITripService TripService
@inject ITruckService TruckService
@inject IStationService StationService
@inject NavigationManager nav

<div class="max-w-5xl mx-auto p-4 sm:p-6 transition-all duration-300 ease-in-out">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2 animate-fade-in-down">Batch Dispatch</h2>
    <p class="text-sm text-gray-500 dark:text-gray-400 mb-6 animate-fade-in-down delay-100">
        Select trucks and dispatch details to create a queue
    </p>

    @if (AppState.IsBusy)
    {
        <div class="flex justify-center items-center py-12 animate-fade-in">
            <svg class="animate-spin h-10 w-10 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
            </svg>
        </div>
    }
    else
    {
        <EditForm Model="@batchDispatch" OnValidSubmit="HandleBatchDispatch">
            <div class="space-y-8">
                <div class="animate-fade-in-up">
                    <StationAutocomplete
                        @bind-Value="SelectedStation"
                        StationType="StationType.LoadingDepot"
                        Label="Select Loading Station"
                        Placeholder="Start typing station name..."
                        ShowDetails="true"
                        AllowClear="true" />
                    @if (errors.ContainsKey("LoadingDepotId"))
                    {
                        <p class="mt-1 text-sm text-red-600">@errors["LoadingDepotId"]</p>
                    }
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="animate-fade-in-up delay-200">
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Dispatch Date <span class="text-red-500">*</span>
                        </label>
                        <InputDate id="dispatchDate" Type="InputDateType.DateTimeLocal"
                                @bind-Value="batchDispatch.DispatchDate"
                                class="@($"{GetInputClass("DispatchDate")} transition duration-200 focus:scale-[1.02]")" />
                        @if (errors.ContainsKey("DispatchDate"))
                        {
                            <p class="mt-1 text-sm text-red-600">@errors["DispatchDate"]</p>
                        }
                    </div>

                    <div class="animate-fade-in-up delay-100">
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Product <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="SelectedProduct" @bind-Value:after="OnProductChanged"
                                class="@($"{GetInputClass("Product")} transition duration-200 focus:scale-[1.02]")">
                            <option value="">-- Select Product --</option>
                            <option value="PMS">PMS</option>
                            <option value="AGO">AGO</option>
                            <option value="ATK">ATK</option>
                            <option value="LPG">LPG</option>
                            <option value="CNG">CNG</option>
                        </InputSelect>
                        @if (errors.ContainsKey("Product"))
                        {
                            <p class="mt-1 text-sm text-red-600">@errors["Product"]</p>
                        }
                    </div>
                </div>                                

                <div class="animate-fade-in-up delay-300">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Select Trucks <span class="text-red-500">*</span>
                    </label>

                    @if (isLoadingTrucks)
                    {
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            @for (int i = 0; i < 6; i++)
                            {
                                <div class="border rounded-lg p-4 bg-gray-100 dark:bg-gray-800 animate-pulse">
                                    <div class="h-5 bg-gray-300 dark:bg-gray-700 rounded w-1/2 mb-3 shimmer"></div>
                                    <div class="h-3 bg-gray-200 dark:bg-gray-600 rounded w-1/3 mb-2 shimmer"></div>
                                    <div class="h-3 bg-gray-200 dark:bg-gray-600 rounded w-1/4 shimmer"></div>
                                </div>
                            }
                        </div>
                    }
                    else if (Trucks.Length == 0 && !string.IsNullOrEmpty(SelectedProduct))
                    {
                        <p class="text-sm text-gray-500 italic animate-fade-in">No trucks available for @SelectedProduct</p>
                    }
                    else
                    {
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            @foreach (var truck in Trucks)
                            {
                                <label class="flex items-start space-x-3 p-4 border rounded-lg shadow-sm hover:shadow-md bg-white dark:bg-gray-800 transition-all duration-300 transform hover:scale-[1.01] animate-fade-in cursor-pointer">
                                    <InputCheckbox @bind-Value="truck.IsSelected" class="mt-1.5" />
                                    <div class="flex flex-col w-full">
                                        <div class="flex justify-between items-center">
                                            <span class="font-semibold text-gray-900 dark:text-gray-100">@truck.LicensePlate</span>
                                            <span class="@GetProductBadgeClass(truck.Product?.ToString())">
                                                @truck.Product
                                            </span>
                                        </div>
                                        <div class="text-sm text-gray-500 mt-1">
                                            Driver: <span class="font-medium">@truck.Driver?.ToString()</span>
                                        </div>
                                        <div class="text-xs text-gray-400">@truck.Manufacturer</div>
                                    </div>
                                </label>
                            }
                        </div>
                    }

                    @if (errors.ContainsKey("Trucks"))
                    {
                        <p class="mt-1 text-sm text-red-600">@errors["Trucks"]</p>
                    }
                </div>

                <div class="flex justify-end gap-4 pt-6 border-t border-gray-200 dark:border-gray-700 animate-fade-in-up delay-400">
                    <button type="button" @onclick="Cancel"
                            class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:bg-gray-700 dark:text-white dark:border-gray-600 transition duration-200 hover:scale-[1.03]">
                        Cancel
                    </button>

                    <button type="submit"
                            class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 flex items-center justify-center min-w-[130px] transition duration-200 hover:scale-[1.03]"
                            disabled="@AppState.IsProcessing">

                        @if (AppState.IsProcessing)
                        {
                            <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                            </svg>
                            @("Processing...")
                        }
                        else
                        {
                            @("Dispatch Trucks")
                        }
                    </button>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    private BatchDispatchModel batchDispatch = new();
    private Dictionary<string, string> errors = new();
    private Truck[] Trucks = [];
    private Station? SelectedStation;
    private string? SelectedProduct;
    private bool isLoadingTrucks = false;

    protected override async Task OnInitializedAsync() => await Task.CompletedTask;

    private async Task OnProductChanged()
    {        
        Trucks = [];
        if (string.IsNullOrEmpty(SelectedProduct))
            return;

        isLoadingTrucks = true;
        StateHasChanged();

        try
        {
            Trucks = await TruckService.GetTrucksAvailableAsync(
                SelectedProduct,                
                AppState.GetCancellationToken()
            );
        }
        catch
        {
            ToastService.ShowError("Failed to load trucks for selected product");
        }
        finally
        {
            isLoadingTrucks = false;
            StateHasChanged();
        }
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600";
        return errors.ContainsKey(fieldName)
            ? baseClass + " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700"
            : baseClass + " border-gray-300";
    }

    private string GetProductBadgeClass(string product) =>
        product switch
        {
            "PMS" => "px-2 py-0.5 rounded text-xs font-semibold bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "AGO" => "px-2 py-0.5 rounded text-xs font-semibold bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-300",
            "ATK" => "px-2 py-0.5 rounded text-xs font-semibold bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "LPG" => "px-2 py-0.5 rounded text-xs font-semibold bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
            "CNG" => "px-2 py-0.5 rounded text-xs font-semibold bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-300",
            _ => "px-2 py-0.5 rounded text-xs font-semibold bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300"
        };

    private async Task HandleBatchDispatch()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        if (SelectedStation == null)
            errors["LoadingDepotId"] = "Loading Station is required";
        if (string.IsNullOrEmpty(SelectedProduct))
            errors["Product"] = "Product is required";
        if (batchDispatch.DispatchDate == null)
            errors["DispatchDate"] = "Dispatch Date is required";
        if (!Trucks.Any(t => t.IsSelected))
            errors["Trucks"] = "At least one truck must be selected";

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }

        try
        {
            var currentUserId = await localStorage.GetItemAsync<Guid?>("uid");
            if (currentUserId == null)
            {
                ToastService.ShowError("User not authenticated");
                AppState.IsProcessing = false;            
                StateHasChanged();
                return;                
            }
            foreach (var truck in Trucks.Where(t => t.IsSelected))
            {
                var trip = new Trip
                {
                    TruckId = truck.Id,
                    LoadingDepotId = SelectedStation!.Id,                    
                    Date = batchDispatch.DispatchDate!.Value,
                    DriverId = truck.DriverId,
                    Status = TripStatus.Dispatched,
                    CreatedAt = DateTimeOffset.UtcNow,
                    CreatedById = currentUserId.Value
                };
                await TripService.AddAsync(trip, AppState.GetCancellationToken());
            }

            ToastService.ShowSuccess("Trucks dispatched successfully", 5);
            nav.NavigateTo("/trips");
        }
        catch
        {
            ToastService.ShowError("Failed to dispatch trucks");
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    private void Cancel() => nav.NavigateTo("/trips");
}
