@inject IStationService StationService
@using Client.Pages.Checkpoints

<div class="fixed inset-0  bg-opacity-50 flex items-center justify-center p-4 z-50">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl dark:bg-gray-800">
        <!-- Modal Header -->
        <div class="flex items-center justify-between p-4 border-b dark:border-gray-700">
            <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                Update Trip Status
            </h3>
            <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-500">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <!-- Tabs -->
        <div class="border-b border-gray-200 dark:border-gray-700">
            <ul class="flex flex-wrap -mb-px">
                <li class="mr-2">
                    <button @onclick="() => SetActiveTab(1)" 
                            class="@GetTabClass(1) inline-block p-4 border-b-2 rounded-t-lg">
                        E-Lock Status
                    </button>
                </li>
                <li class="mr-2">
                    <button @onclick="() => SetActiveTab(2)" 
                            class="@GetTabClass(2) inline-block p-4 border-b-2 rounded-t-lg">
                        Truck Arrival
                    </button>
                </li>
                <li class="mr-2">
                    <button @onclick="() => SetActiveTab(3)" 
                            class="@GetTabClass(3) inline-block p-4 border-b-2 rounded-t-lg">
                        Checkpoints
                    </button>
                </li>
                <li class="mr-2">
                    <button @onclick="() => SetActiveTab(4)" 
                            class="@GetTabClass(4) inline-block p-4 border-b-2 rounded-t-lg">
                        Discharge
                    </button>
                </li>
                <li>
                    <button @onclick="() => SetActiveTab(5)" 
                            class="@GetTabClass(5) inline-block p-4 border-b-2 rounded-t-lg">
                        Close Trip
                    </button>
                </li>
            </ul>
        </div>

        <!-- Modal Body -->
        <div class="p-6 space-y-4">
            <!-- Trip Info Summary -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg dark:bg-gray-700">
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Trip Date</p>
                    <p class="font-medium dark:text-white">@Trip.Date.ToString("dd MMM yyyy")</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Dispatch ID</p>
                    <p class="font-medium dark:text-white">@Trip.DispatchId</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Waybill No</p>
                    <p class="font-medium dark:text-white">@Trip.WaybillNo</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Current Status</p>
                    <p class="font-medium dark:text-white">@Trip.Status</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Trip Duration</p>
                    <p class="font-medium dark:text-white">
                        @if (Trip.ReturnDate.HasValue)
                        {
                            var duration = Trip.CalculateTripDuration(Trip!.Date, Trip!.ReturnDate);
                            @($"{duration} day{(duration == 1 ? "" : "s")}")
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </p>
                </div>
            </div>

            <!-- Tab Content -->
            @if (activeTab == 1)
            {
                <!-- E-Lock Status Tab -->
                <div class="space-y-4">
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            E-Lock Status
                        </label>
                        <select @bind="Trip.ElockStatus" 
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="@ElockStatus.Normal">Normal</option>
                            <option value="@ElockStatus.Abnormal">Abnormal</option>
                        </select>
                    </div>
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Comments (Optional)
                        </label>
                        <textarea @bind="Trip.Notes" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                  rows="3" placeholder="Any notes about the e-lock status..."></textarea>
                    </div>
                </div>
            }
            else if (activeTab == 2)
            {
                @if (Trip.Truck.Product == Product.PMS)
                {
                    <!-- Truck ATV Arrival Tab -->
                    <div class="space-y-4">
                        <div class="flex items-center">
                            <input id="arrived-checkbox" type="checkbox" @bind="Trip.ArrivedAtATV" 
                                class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                            <label for="arrived-checkbox" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                                Truck has arrived at ATV
                            </label>
                        </div>
                        
                        @if (Trip.ArrivedAtATV)
                        {
                            <div>
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                    ATV Arrival Date & Time
                                </label>
                                <input type="datetime-local" @bind="Trip.ATVArrivalDate"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            </div>

                            <StateSelector Destination="@Trip.LocationAtv" Errors="errors" GetInputClass="GetInputClass" />
                        }
                    </div>
                }                 

                <!-- Truck Arrival Tab -->
                <div class="space-y-4">
                    <div class="flex items-center">
                        <input id="arrived-checkbox" type="checkbox" @bind="Trip.Destination!.ArrivedAtStation" 
                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                        <label for="arrived-checkbox" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                            Truck has arrived at destination
                        </label>
                    </div>
                    
                    @if (Trip.Destination.ArrivedAtStation)
                    {
                        <div>
                            <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                Arrival Date & Time
                            </label>
                            <input type="datetime-local" @bind="Trip.Destination.StationArrivalDate"
                                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        </div>
                    }
                </div>




            }
            else if (activeTab == 3)
            {
                <!-- Checkpoints Tab - Pure Flowbite -->
                <div class="space-y-4">
                    <!-- Section Header -->
                    @* <div class="flex items-center justify-between mb-6">
                        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Checkpoints</h2>
                    </div>
                     *@
                    <!-- Search and Add Button -->
                    <div class="mb-6 flex flex-col sm:flex-row justify-end gap-4">
                        @* <!-- Search Input -->
                        <div class="relative w-full sm:w-64">
                            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                                </svg>
                            </div>
                            <input type="text" 
                                @bind="checkpointSearch"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                                placeholder="Search checkpoints...">
                        </div> *@
                        
                        <!-- Add Button -->
                        <button @onclick="ShowAddCheckpointModal" 
                                class="flex items-center justify-center text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                            <svg class="w-4 h-4 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"/>
                            </svg>
                            Add Checkpoint
                        </button>
                    </div>
                    
                    <!-- Checkpoints List -->
                    <div class="space-y-4">
                        @if (Trip!.Checkpoints?.Any() ?? false)
                        {
                            @foreach (var checkpoint in Trip!.Checkpoints.OrderBy(x => x.CreatedAt))
                            {
                                <!-- Checkpoint Card -->
                                <div class="p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            @* <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                                @checkpoint.Name
                                            </h3> *@
                                            <p class="text-gray-500 dark:text-gray-400 mt-1">
                                                @checkpoint!.Checkpoint!.Name
                                            </p>
                                            <div class="mt-2 flex flex-wrap gap-2">
                                                @* <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300">
                                                    Sequence: @checkpoint.SequenceOrder
                                                </span> *@
                                                @if (checkpoint.IsCompleted)
                                                {
                                                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">
                                                        Completed
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                        <div class="flex gap-2">
                                            <button @onclick="() => EditCheckpoint(checkpoint)"
                                                    class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm p-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                                                <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                    <path d="M12.687 14.408a3.01 3.01 0 0 1-1.533.821l-3.566.713a3 3 0 0 1-3.53-3.53l.713-3.566a3.01 3.01 0 0 1 .821-1.533L10.905 2H2.167A2.169 2.169 0 0 0 0 4.167v11.666A2.169 2.169 0 0 0 2.167 18h11.666A2.169 2.169 0 0 0 16 15.833V11.1l-3.313 3.308Z"/>
                                                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286Zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94Z"/>
                                                </svg>
                                                <span class="sr-only">Edit</span>
                                            </button>
                                            <button @onclick="() => ShowDeleteCheckpointModal(checkpoint)"
                                                    class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm p-2 dark:bg-red-600 dark:hover:bg-red-700 focus:outline-none dark:focus:ring-red-800">
                                                <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                                                    <path d="M17 4h-4V2a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v2H1a1 1 0 0 0 0 2h1v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V6h1a1 1 0 1 0 0-2ZM7 2h4v2H7V2Zm1 14a1 1 0 1 1-2 0V8a1 1 0 0 1 2 0v8Zm4 0a1 1 0 0 1-2 0V8a1 1 0 0 1 2 0v8Z"/>
                                                </svg>
                                                <span class="sr-only">Delete</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <!-- Empty State -->
                            <div class="text-center p-12 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                                <svg class="mx-auto w-12 h-12 text-gray-400 dark:text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9h2v5m-2 0h4M9.408 5.5h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                                </svg>
                                <h3 class="mt-4 text-lg font-medium text-gray-900 dark:text-white">No Checkpoints</h3>
                                <p class="mt-2 text-gray-500 dark:text-gray-400">
                                    No checkpoints have been added to this trip yet.
                                </p>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (activeTab == 4)
            {
                <!-- Discharge/Shortage Tab -->
                <div class="space-y-4">
                    <div class="flex items-center">
                        <input id="discharged-checkbox" type="checkbox" @bind="Trip!.Destination!.IsDischarged" 
                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                        <label for="discharged-checkbox" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                            Product has been discharged
                        </label>
                    </div>
                    
                    @if (Trip.Destination.IsDischarged)
                    {
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <!-- Waybill -->
                            <div>
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                    Waybill No <span class="text-red-500">*</span>
                                </label>
                                <InputText @bind-Value="Trip.WaybillNo" id="wayBillNumber" class="@GetInputClass("WaybillNo")"  />
                                @if (errors.ContainsKey("WaybillNo"))
                                {
                                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["WaybillNo"]</p>
                                }
                            </div>
                            <div>
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                    Discharge Date <span class="text-red-500">*</span>
                                </label>
                                <input type="datetime-local" @bind="Trip.Destination.DischargeDate"
                                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                @if (errors.ContainsKey("WaybillNo"))
                                {
                                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["WaybillNo"]</p>
                                }
                            </div>                            
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <!-- Destination -->
                            <div>
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Destination <span class="text-red-500">*</span></label>
                                <InputSelect @bind-Value="Trip.Destination.StationId" class="@GetInputClass("StationId")">
                                    <option value="">-- Select Destionation --</option>
                                    @foreach (var station in Destionations!)
                                    {
                                        <option value="@station.Id">@station.Name</option>
                                    }
                                </InputSelect>
                                @if (errors.ContainsKey("StationId"))
                                {
                                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["StationId"]</p>
                                }
                            </div>

                            <div>
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                    Discharged Quantity
                                </label>
                                <div class="flex">
                                    <input type="number" step="0.01" @bind="Trip.Destination.DischargedQuantity"
                                           class="rounded-l-lg bg-gray-50 border border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                    <span class="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 border border-l-0 border-gray-300 rounded-r-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
                                        @Trip.Origin?.Unit
                                    </span>
                                    @if (errors.ContainsKey("DischargedQuantity"))
                                    {
                                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DischargedQuantity"]</p>
                                    }
                                </div>
                            </div>                            
                        </div>
                        
                        <div class="space-y-2">
                            <div class="flex items-center">
                                <input id="shortage-checkbox" type="checkbox" @bind="Trip.Destination.HasShortage" 
                                       class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label for="shortage-checkbox" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                                    There was a shortage
                                </label>
                            </div>
                            
                            @if (Trip.Destination.HasShortage == true)
                            {
                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                        Shortage Amount
                                    </label>
                                    <div class="flex">
                                        <input type="number" step="0.01" @bind="Trip.Destination.ShortageAmount"
                                               class="rounded-l-lg bg-gray-50 border border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                        <span class="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 border border-l-0 border-gray-300 rounded-r-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
                                            @Trip.Origin?.Unit
                                        </span>
                                        @if (errors.ContainsKey("ShortageAmount"))
                                        {
                                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["ShortageAmount"]</p>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else if (activeTab == 5)
            {
                <!-- Close Trip Tab -->
                <div class="space-y-4">
                    <div class="p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-700 dark:text-blue-400" role="alert">
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 w-4 h-4 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"/>
                            </svg>
                            <span class="font-medium">Important!</span>
                        </div>
                        <p class="mt-2">Closing a trip will mark it as completed and no further changes can be made.</p>
                    </div>

                
                    @* <div class="flex items-center">
                        <InputCheckbox id="return-checkbox" type="checkbox" @bind-Value="Trip.ReturnDate.Value" 
                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                        <label for="return-checkbox" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                            Truck has returned
                        </label>
                    </div> *@
                    
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Return Date
                        </label>
                        <input type="date" @bind="Trip.ReturnDate"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            @if (errors.ContainsKey("ReturnDate"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["ReturnDate"]</p>
                            }
                    </div>
                    
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Final Trip Status
                        </label>
                        <select @bind="Trip.Status" 
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="@TripStatus.Active">Active</option>
                            <option value="@TripStatus.Closed">Closed</option>
                        </select>
                    </div>
                </div>
            }
        </div>

        <!-- Modal Footer -->
        <div class="flex items-center justify-end p-4 gap-5 border-t border-gray-200 dark:border-gray-700">
            <button @onclick="CloseModal" type="button" class="py-2.5 px-5 me-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
                Cancel
            </button>
            <button @onclick="SaveChanges" type="button" class="pr-4 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                Save Changes
            </button>
        </div>
    </div>
</div>


@if (showCheckpointModal)
{
    <CheckpointModal Data="@currentCheckpoint"
        IsVisible="@showCheckpointModal"
        EditMode="@EditMode"
        OnClose="@CloseCheckpointModal"
        OnSave="@EditCheckpoint" />
}


@code {
    private int activeTab = 1;
    
    [Parameter]
    public Trip Trip { get; set; } = new();
    
    [Parameter]
    public EventCallback CloseModal { get; set; }
    
    [Parameter]
    public EventCallback<Trip> OnSave { get; set; }
    [Parameter]
    public EventCallback<Destination> OnUpdateDestination { get; set; }
        

    private Station[]? Destionations = [];

    private Dictionary<string, string> errors = new();

    public bool EditMode = false;

    private List<TripCheckpoint>? checkpoints;
    private string checkpointSearch = string.Empty;
    private TripCheckpoint currentCheckpoint = new();
    private TripCheckpoint? editingCheckpoint;
    private bool showCheckpointModal = false;
    private bool showDeleteCheckpointModal = false;
    private TripCheckpoint? checkpointToDelete;

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;        
        Destionations = await StationService.GetAsync(StationType.DischargeStation.ToString(), AppState.GetCancellationToken());
        @* Drivers = await DriverService.GetAsync(AppState.GetCancellationToken());
        if (Id.HasValue)
            CurrentTrip = await TripService.GetAsync(Id.Value, AppState.GetCancellationToken()) ?? new();                     *@
        AppState.IsBusy = false;
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }
    
    private void SetActiveTab(int tabNumber)
    {
        activeTab = tabNumber;
    }
    
    private string GetTabClass(int tabNumber)
    {
        return activeTab == tabNumber 
            ? "text-blue-600 border-blue-600 dark:text-blue-500 dark:border-blue-500" 
            : "border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300";
    }
    
    private async Task SaveChanges()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields       

        if (activeTab == 2)
        {
            if (Trip.Truck.Product == Product.PMS && Trip.ArrivedAtATV)
            {
                if (Trip!.ATVArrivalDate is null)
                {
                    errors["ATVArrivalDate"] = "Date is required";
                }

                if (string.IsNullOrWhiteSpace(Trip!.LocationAtv))
                {
                    errors["LocationAtv"] = "ATV Location is required";
                }
            }

            if (Trip!.Destination.ArrivedAtStation)
            {
                if (Trip!.Destination!.StationArrivalDate is null)
                {
                    errors["StationArrivalDate"] = "Date is required";
                }               
            }           
        }
        if (activeTab == 3)
        {
            if (Trip!.Destination.IsDischarged)
            {
                if (string.IsNullOrWhiteSpace(Trip!.WaybillNo))
                {
                    errors["WaybillNo"] = "Waybill number is required";
                }

                if (Trip!.Destination!.DischargeDate is null)
                {
                    errors["DischargeDate"] = "Discharge Date is required";
                }

                if (Trip!.Destination!.StationId is null)
                {
                    errors["StationId"] = "Destination is required";
                }

                if (Trip!.Destination!.DischargedQuantity is null)
                {
                    errors["DischargedQuantity"] = "DischargedQuantity is required";
                }
            }

             if (Trip!.Destination.HasShortage.HasValue && Trip.Destination.HasShortage.Value)
             {
                if (Trip!.Destination!.ShortageAmount is null)
                {
                    errors["ShortageAmount"] = "Shortage Amount is required";
                }
             }

            
        }

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }
        Trip.UpdatedAt = DateTimeOffset.UtcNow;
        if (activeTab == 4)
        {
            Trip.Destination!.UpdatedAt = DateTimeOffset.UtcNow;
            await OnSave.InvokeAsync(Trip);
            await OnUpdateDestination.InvokeAsync(Trip!.Destination);
        }
        else
        {
            
            await OnSave.InvokeAsync(Trip);
        }        
    }

    private void ShowAddCheckpointModal()
    {
        currentCheckpoint = new();
        editingCheckpoint = null;
        showCheckpointModal = true;
    }

    private void EditCheckpoint(TripCheckpoint checkpoint)
    {
        currentCheckpoint = new()
        {
            Id = checkpoint.Id,
            TripId = Trip!.Id,           
            ExpectedDistanceFromPreviousKm = checkpoint.ExpectedDistanceFromPreviousKm,
            EstimatedArrivalTime = checkpoint.EstimatedArrivalTime,
            Notes = checkpoint.Notes
        };
        Trip!.Checkpoints.Add(currentCheckpoint);
        CloseCheckpointModal();
    }

    private void ShowDeleteCheckpointModal(TripCheckpoint checkpoint)
    {
        checkpointToDelete = checkpoint;
        showDeleteCheckpointModal = true;
    }

    private async Task DeleteCheckpoint()
    {
        if (checkpointToDelete == null) return;
        
        try
        {
            @* await CheckpointService.DeleteAsync(checkpointToDelete.Id);
            await LoadCheckpoints(); *@
            showDeleteCheckpointModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting checkpoint: {ex.Message}");
        }
    }

    private void CloseCheckpointModal()
    {
        showCheckpointModal = false;
        currentCheckpoint = new();
        editingCheckpoint = null;
    }
}