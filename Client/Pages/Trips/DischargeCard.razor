@using Shared.Models.Checkpoints

<div class="p-6 bg-white border border-gray-200 rounded-xl shadow-sm dark:bg-gray-800 dark:border-gray-700
            @(Data.IsSiding ? "border-yellow-300 bg-yellow-50/50 dark:bg-yellow-900/10" : "")">
    
    <!-- Header -->
    <div class="flex justify-between items-start mb-4">
        <div class="flex-1">
            <h5 class="text-xl font-bold text-gray-900 dark:text-white">
                @Data.Station?.Name
            </h5>
            
            <!-- Invoiced Station -->
            @if (Data.InvoicedStationId.HasValue && Data.StationId != Data.InvoicedStationId && Data.InvoicedStation != null)
            {
                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    üí∞ Invoiced: @Data.InvoicedStation.Name
                </p>
            }
        </div>
        
        <!-- Buttons -->
        @* <div class="flex space-x-2 ml-4">
            <button @onclick="() => ToggleEdit()" 
                    class="p-2 text-blue-600 hover:text-blue-800 dark:text-blue-400">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
            </button>
            <button @onclick="() => OnDelete.InvokeAsync(Data.Id)" 
                    class="p-2 text-red-600 hover:text-red-800 dark:text-red-400">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                </svg>
            </button>
        </div> *@
    </div>

    <!-- Siding Badge -->
    @if (Data.IsSiding && Data.SidingHours > 0)
    {
        <div class="mb-4 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium 
                    bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
            SIDING: @Data.SidingHours.ToString("0.0")h
        </div>
    }

    @if (isEditing)
    {
        <!-- EDIT MODE -->
        <div class="space-y-3">
            <div class="grid grid-cols-2 gap-3">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Arrival</label>
                    <input type="datetime-local" @bind="editData.TruckArrival" 
                           @bind:format="yyyy-MM-ddTHH:mm" 
                           class="w-full p-2 border rounded dark:bg-gray-700 dark:text-white"/>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Start Time</label>
                    <input type="datetime-local" @bind="editData.DischargeStartTime" 
                           @bind:format="yyyy-MM-ddTHH:mm" 
                           class="w-full p-2 border rounded dark:bg-gray-700 dark:text-white"/>
                </div>
            </div>
            
            <div class="grid grid-cols-2 gap-3">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Quantity</label>
                    <input type="number" step="0.01" @bind="editData.QuantityDischarged" 
                           class="w-full p-2 border rounded dark:bg-gray-700 dark:text-white"/>
                </div>
                <div class="flex items-center">
                    <input type="checkbox" id="final" @bind="editData.IsFinalDischarge" class="mr-2"/>
                    <label class="text-sm font-medium">Final Discharge</label>
                </div>
            </div>
            
            <div class="flex justify-end space-x-2 pt-2">
                <button @onclick="CancelEdit" class="px-3 py-1 text-sm text-gray-600 rounded">Cancel</button>
                <button @onclick="SaveEdit" class="px-3 py-1 text-sm bg-blue-600 text-white rounded">Save</button>
            </div>
        </div>
    }
    else
    {
        <!-- VIEW MODE -->
        <div class="grid grid-cols-2 gap-4 text-sm">
            <div>
                <span class="text-gray-500 dark:text-gray-400">Arrival</span>
                <p class="font-medium">@(Data.TruckArrival?.ToString("dd MMM HH:mm") ?? "‚Äî")</p>
            </div>
            <div>
                <span class="text-gray-500 dark:text-gray-400">Start</span>
                <p class="font-medium">@(Data.DischargeStartTime?.ToString("dd MMM HH:mm") ?? "‚Äî")</p>
            </div>
            <div>
                <span class="text-gray-500 dark:text-gray-400">Quantity</span>
                <p class="font-medium">@Data.QuantityDischarged.ToString("0.##") MT</p>
            </div>
            <div>
                <span class="text-gray-500 dark:text-gray-400">Final</span>
                <p class="font-medium">@(Data.IsFinalDischarge ? "‚úÖ Yes" : "‚è≥ No")</p>
            </div>
            <div>
                <span class="text-gray-500 dark:text-gray-400">Files</span>
                <p class="font-medium">@Data.Files.Count</p>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Data.Notes))
        {
            <div class="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded">
                <p class="text-sm text-gray-700 dark:text-gray-300">@Data.Notes</p>
            </div>
        }
    }
</div>

@code {
    [Parameter] public Discharge Data { get; set; } = new();
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }
    [Parameter] public EventCallback<Discharge> OnEdit { get; set; }
    [Parameter] public decimal InitialQuantity { get; set; }
    [Parameter] public string Destination { get; set; } = "";

    private bool isEditing = false;
    private Discharge editData = new();

    protected override void OnParametersSet()
    {
        editData = new Discharge
        {
            Id = Data.Id,
            TruckArrival = Data.TruckArrival,
            DischargeStartTime = Data.DischargeStartTime,
            QuantityDischarged = Data.QuantityDischarged,
            IsFinalDischarge = Data.IsFinalDischarge,
            StationId = Data.StationId,
            InvoicedStationId = Data.InvoicedStationId,
            Notes = Data.Notes
        };
    }

    private void ToggleEdit()
    {
        isEditing = !isEditing;
        if (!isEditing) editData = new Discharge { /* reset */ };
    }

    private void CancelEdit()
    {
        isEditing = false;
        editData = new Discharge
        {
            TruckArrival = Data.TruckArrival,
            DischargeStartTime = Data.DischargeStartTime,
            QuantityDischarged = Data.QuantityDischarged,
            IsFinalDischarge = Data.IsFinalDischarge
        };
    }

    private async Task SaveEdit()
    {
        // Update Data
        Data.TruckArrival = editData.TruckArrival;
        Data.DischargeStartTime = editData.DischargeStartTime;
        Data.QuantityDischarged = editData.QuantityDischarged;
        Data.IsFinalDischarge = editData.IsFinalDischarge;
        Data.Notes = editData.Notes;

        // Recalculate Siding
        if (Data.TruckArrival.HasValue && Data.DischargeStartTime.HasValue)
        {
            var hours = (Data.DischargeStartTime.Value - Data.TruckArrival.Value).TotalHours;
            Data.IsSiding = hours > 0 && hours <= 24;
            Data.SidingHours = Math.Max(0, hours);
        }

        isEditing = false;
        await OnEdit.InvokeAsync(Data);
    }
}