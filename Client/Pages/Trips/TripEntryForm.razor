@page "/trips/{Action}/{Id:guid?}"
@using Client.Pages.Modals
@using Shared.Dtos
@inject ITripService TripService
@inject ITruckService TruckService
@inject IStationService StationService

@inject IDriverService DriverService


<div class="max-w-2xl mx-auto p-4 sm:p-6">

    @if (AppState.IsBusy)
    {
        <Loader/>
    }
    else
    {
        <!-- Form Header -->
        <div class="mb-6">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white">@(EditMode ? "Edit Trip" : "Add New Trip")</h2>
            <p class="text-sm text-gray-500 dark:text-gray-400">Please fill in the details below</p>
        </div>


        <EditForm Model="@tripLoading" OnValidSubmit="HandleSubmit">            
            @if (alert is not null)
            {
                <Toast Icon="@alert.Icon" Message="@alert.Message"/>
            }
            <div class="space-y-6">

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Loading Date -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Dispatch Date <span class="text-red-500">*</span>
                        </label>
                        <InputDate id="loadingDate" Type="InputDateType.DateTimeLocal"  
                            @bind-Value="tripLoading!.LoadingDate"
                            @bind-Value:after="OnDateChanged"
                            class="@GetInputClass("LoadingDate")"
                            aria-placeholder="select loading date" />

                        @if (errors.ContainsKey("LoadingDate"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LoadingDate"]</p>
                        }
                    </div> 
                     <!-- Waybill -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Dispatch No <span class="text-red-500"></span>
                        </label>
                        <InputText                             
                            @bind-Value="tripLoading.DispatchId" 
                            id="dispatchId" 
                            class="@GetInputClass("DispatchId")" 
                            placeholder="system autogenerated" 
                            readonly />

                        @if (errors.ContainsKey("DispatchId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DispatchId"]</p>
                        }
                    </div>                                       
                </div>               

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Truck -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Truck <span class="text-red-500">*</span>
                        </label>
                        <InputSelect id="truckId"
                            class="@GetInputClass("TruckId")"
                            @bind-Value="tripLoading.TruckId"
                            @bind-Value:after="OnTruckChanged">
                            <option value="">-- Select Truck --</option>
                            @foreach (var truck in Trucks!)
                            {
                                <option value="@truck.Id">@truck.LicensePlate</option>
                            }
                        </InputSelect>
                        @if (errors.ContainsKey("TruckId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["TruckId"]</p>
                        }
                    </div>

                     <!-- Driver -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Driver <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="tripLoading.DriverId" id="driverId" class="@GetInputClass("DriverId")">
                            <option value="">-- Select Driver --</option>
                            @foreach (var driver in Drivers!)
                            {
                                <option value="@driver.Id">@driver.ToString()</option>
                            }
                        </InputSelect>
                        @if (errors.ContainsKey("DriverId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DriverId"]</p>
                        }
                    </div>  
                </div>

               

                <!-- Loading Point -->
                <div>
                    <StationAutocomplete                             
                            @bind-Value="SelectedStation"
                            StationType="StationType.LoadingDepot"
                            Label="Select Loading Station"
                            Placeholder="Start typing station name..."
                            ShowDetails="true"
                            AllowClear="true" />

                        @if (SelectedStation != null)
                        {
                            <div class="mt-4 p-4 bg-green-50 rounded">
                                <h4 class="font-bold">Selected Station:</h4>
                                <p>@SelectedStation.Name</p>
                                <p><small>@(StringConverter.ToDescription(SelectedStation.Type))</small></p>
                            </div>
                        }
                        @* @if (errors.ContainsKey("LoadingPointId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LoadingPointId"]</p>
                        } *@

                    @* <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Loading Point <span class="text-red-500">*</span>
                    </label>
                    <InputSelect @bind-Value="tripLoading.LoadingPointId" class="@GetInputClass("LoadingPointId")">
                        <option value="">-- Select Loading Depot --</option>
                        @foreach (var station in Depots!)
                        {
                            <option value="@station.Id">@station.Name</option>
                        }
                    </InputSelect>
                    @if (errors.ContainsKey("LoadingPointId"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LoadingPointId"]</p>
                    } *@
                </div>                               

             <!-- Timestamps -->
            @if (Id.HasValue)
            {
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Created At</label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @CurrentTrip.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Last Updated</label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @(CurrentTrip.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                        </div>
                    </div>
                </div>
            }
            
            <!-- Form Actions -->
            
            
            <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button type="button" @onclick="Cancel"
                    class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">
                    Cancel
                </button>
                <button type="submit"
                    class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 flex items-center justify-center min-w-[120px]"
                    disabled="@AppState.IsProcessing">
                    @if (AppState.IsProcessing)
                    {
                        <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                        </svg>
                        @("Processing...")
                    }
                    else
                    {
                        @(EditMode ? "Update Trip" : "Add Trip")
                    }
                </button>
            </div>
            </div>
        </EditForm>
    }

<ConfirmationModal @ref="ConfirmModal"
                   Title="Trip Exists"
                   Message="A trip for this truck and date already exists. Do you want to continue?"
                   OnClose="OnConfirmModalClose" />
</div>


@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    public TripLoadingDto? tripLoading { get; set; } = new();
    [Parameter] public Trip CurrentTrip { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private ConfirmationModal? ConfirmModal;
    private bool userConfirmed = false;

    bool result = false;
    private NotificationAlert? alert = null;

    private Dictionary<string, string> errors = new();

    private Truck[]? Trucks = [];
    private Driver[]? Drivers = [];
    private Station[]? Depots = [];
    private Station[]? Destionations = [];

    private Station? SelectedStation;

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;
        Trucks = await TruckService.GetTrucksAvailableAsync(AppState.GetCancellationToken());        
        Destionations = await StationService.GetAsync(StationType.DischargeStation.ToString(), AppState.GetCancellationToken());
        Drivers = await DriverService.GetAsync(AppState.GetCancellationToken());
        if (Id.HasValue)
        {
            CurrentTrip = await TripService.GetAsync(Id.Value, AppState.GetCancellationToken()) ?? new();
            EditMode = true;
        }                                
        AppState.IsBusy = false;
    }
    private async Task UpdateDispatchIdIfPossible()
    {
        await _js.InvokeVoidAsync("console.log", "Updating Dispatch ID...");            
        if (tripLoading.TruckId != Guid.Empty && tripLoading.LoadingDate != null)
        {            
            var result = await TripService.GenerateDispatchIdAsync(tripLoading.TruckId, DateOnly.FromDateTime(tripLoading.LoadingDate.Value.DateTime), AppState.GetCancellationToken());
            tripLoading.DispatchId = result;
            await _js.InvokeVoidAsync("console.log", $"Generated Dispatch ID: {result}");            
            StateHasChanged();
        }
    }


    private async Task OnTruckChanged()
    {
        var truck = Trucks?.FirstOrDefault(x => x.Id == tripLoading!.TruckId);
        tripLoading!.LicensePlate = truck!.LicensePlate;
        
        if (truck.DriverId is not null)
        {
            tripLoading.DriverId = truck.DriverId;
        }

        //await UpdateDispatchIdIfPossible();
    }

    private async Task OnDateChanged()
    {
        //await UpdateDispatchIdIfPossible();
    }

    private void LocationChanged(string location)
    {
        tripLoading!.Destination = location;
        StateHasChanged();
    }

    private void OnStationSelected(Station station)
    {
        SelectedStation = station;
        tripLoading!.LoadingPointId = station.Id;
        StateHasChanged();
    }

     private async Task<List<Station>> SearchStationsAsync(string searchText, int page, CancellationToken token)
    {
        var request = new GridDataRequest
        {
            Page = page,
            PageSize = 10,
            SearchTerm = searchText
        };

        var response = await StationService.GetPagedAsync(
            StationType.LoadingDepot.ToString(),
            request,
            token);

        return response.Data?.ToList() ?? new();
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    private async Task OnConfirmModalClose(bool confirmed)
    {
        if (confirmed)
        {
            userConfirmed = true;
            await HandleSubmit(); // retry the submission with confirmation
        }
        else
        {
            userConfirmed = false;
            AppState.IsProcessing = false;
        }
    }


    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields
        if (tripLoading!.LoadingDate is null)
        {
            errors["LoadingDate"] = "Loading Date is required";
        }
        if (tripLoading!.TruckId.Equals(Guid.Empty))
        {
            errors["TruckId"] = "Truck is required";
        }        
        if (tripLoading!.LoadingPointId.Equals(Guid.Empty))
        {
            errors["LoadingPointId"] = "Loading Point is required";
        }
        if (string.IsNullOrWhiteSpace(tripLoading.Destination))
        {
            errors["Destination"] = "Destination is required";
        }
        if (tripLoading!.DriverId.Equals(Guid.Empty) || tripLoading!.DriverId is null)
        {
            errors["DriverId"] = "Driver is required";
        }

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }
                
        try
        {

            if (!Id.HasValue)
            {
                bool exists = await TripService.DispatchExistAsync(
                    tripLoading.TruckId,
                    DateOnly.FromDateTime(tripLoading.LoadingDate!.Value.DateTime),
                    AppState.GetCancellationToken());

                if (exists && !userConfirmed)
                {                    
                    AppState.IsProcessing = false;
                    ConfirmModal?.Show();
                    return;
                }
            }
            if (!Id.HasValue)
            {               
                if (SelectedStation is not null)             
                    tripLoading.LoadingPointId = SelectedStation!.Id;

                CurrentTrip = TripService.MapTripLoadingAsync(tripLoading, AppState.GetCancellationToken());
                CurrentTrip.SetInitialStatus();
                result = await TripService.AddAsync(CurrentTrip, AppState.GetCancellationToken());
            }
            else
            {
                CurrentTrip.UpdateStatusWithLoadingInfo();
                result = await TripService.UpdateAsync(CurrentTrip, AppState.GetCancellationToken());
            }

            if (result)
            {
                ToastService.ShowSuccess($"Trip successfully {(EditMode ? "updated" : "added")}", 5);
                Cancel();
            }
        }
        catch (Exception ex)
        {        
           ToastService.ShowError($"Operation failed");
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    
    private void Cancel()
    {
        nav.NavigateTo("trips");
    }
}