@page "/trips/{Action}/{Id:guid?}"
@using Shared.Dtos
@inject ITripService TripService
@inject ITruckService TruckService
@inject IStationService StationService

@inject IDriverService DriverService


<div class="max-w-2xl mx-auto p-4 sm:p-6">

    @if (AppState.IsBusy)
    {
        <Loader/>
    }
    else
    {
        <!-- Form Header -->
        <div class="mb-6">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white">@(EditMode ? "Edit Trip" : "Add New Trip")</h2>
            <p class="text-sm text-gray-500 dark:text-gray-400">Please fill in the details below</p>
        </div>


        <EditForm Model="@tripLoading" OnValidSubmit="HandleSubmit">            
            @if (alert is not null)
            {
                <Toast Icon="@alert.Icon" Message="@alert.Message"/>
            }
            <div class="space-y-6">

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <!-- Waybill -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Dispatch ID <span class="text-red-500"></span>
                        </label>
                        <InputText Value="@tripLoading!.DispatchId"  ValueExpression="@(() => tripLoading!.DispatchId)" id="dispatchId" class="@GetInputClass("DispatchId")" placeholder="e.g., autogenerated" disabled />
                        @if (errors.ContainsKey("DispatchId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DispatchId"]</p>
                        }
                    </div>


                     <!-- Loading Date -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Loading Date <span class="text-red-500">*</span>
                        </label>
                        <InputDate id="loadingDate"  @bind-Value="tripLoading!.LoadingDate"
                            class="@GetInputClass("LoadingDate")"
                            aria-placeholder="select loading date" />
                        @if (errors.ContainsKey("LoadingDate"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LoadingDate"]</p>
                        }
                    </div>

                   
                </div>
               

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Truck -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Truck <span class="text-red-500">*</span>
                        </label>
                        <InputSelect id="truckId"
                            class="@GetInputClass("TruckId")"
                            @bind-Value="tripLoading.TruckId"
                            @bind-Value:after="OnTruckChanged">
                            <option value="">-- Select Truck --</option>
                            @foreach (var truck in Trucks!)
                            {
                                <option value="@truck.Id">@truck.LicensePlate</option>
                            }
                        </InputSelect>
                        @if (errors.ContainsKey("TruckId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["TruckId"]</p>
                        }
                    </div>

                     <!-- Driver -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Driver <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="tripLoading.DriverId" id="driverId" class="@GetInputClass("DriverId")">
                            <option value="">-- Select Driver --</option>
                            @foreach (var driver in Drivers!)
                            {
                                <option value="@driver.Id">@driver.ToString()</option>
                            }
                        </InputSelect>
                        @if (errors.ContainsKey("DriverId"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DriverId"]</p>
                        }
                    </div>  
                </div>

               

                <!-- Loading Point -->
                <div>
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Loading Point <span class="text-red-500">*</span>
                    </label>
                    <InputSelect @bind-Value="tripLoading.LoadingPointId" class="@GetInputClass("LoadingPointId")">
                        <option value="">-- Select Loading Depot --</option>
                        @foreach (var station in Depots!)
                        {
                            <option value="@station.Id">@station.Name</option>
                        }
                    </InputSelect>
                    @if (errors.ContainsKey("LoadingPointId"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LoadingPointId"]</p>
                    }
                </div>               

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">                
                    <!-- Quantity -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Dispatch Quantity <span class="text-red-500">*</span>
                        </label>
                        <InputNumber @bind-Value="tripLoading.DispatchQuantity" class="@GetInputClass("DispatchQuantity")" />
                        @if (errors.ContainsKey("DispatchQuantity"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DispatchQuantity"]</p>
                        }
                    </div>

                     <!-- Unit -->
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Unit</label>
                        <InputSelect @bind-Value="tripLoading.DispatchUnit" class="@GetInputClass("DispatchUnit")">
                            @foreach (var unit in Enum.GetValues<UnitOfMeasure>())
                            {
                                <option value="@unit">@unit</option>
                            }
                        </InputSelect>
                    </div>
                </div>               

                <!-- Destination -->
                @* <div>
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Destination <span class="text-red-500">*</span>
                    </label>
                    <InputText @bind-Value="tripLoading.Destination" id="destination" class="@GetInputClass("Destination")" placeholder="e.g., Abuja" />
                    @if (errors.ContainsKey("Destination"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Destination"]</p>
                    }
                </div> *@
                <StateSelector  OnLocationChanged="@LocationChanged" Destination="@tripLoading.Destination" Errors="errors" GetInputClass="GetInputClass"/>

             <!-- Timestamps -->
            @if (Id.HasValue)
            {
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Created At</label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @CurrentTrip.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Last Updated</label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @(CurrentTrip.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                        </div>
                    </div>
                </div>
            }
            
            <!-- Form Actions -->
            
            
            <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button type="button" @onclick="Cancel"
                    class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">
                    Cancel
                </button>
                <button type="submit"
                    class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    @(EditMode ? "Update Trip" : "Add Trip")
                </button>
            </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    public TripLoadingDto? tripLoading { get; set; } = new();
    [Parameter] public Trip CurrentTrip { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    bool result = false;
    private NotificationAlert? alert = null;

    private Dictionary<string, string> errors = new();

    private Truck[]? Trucks = [];
    private Driver[]? Drivers = [];
    private Station[]? Depots = [];
    private Station[]? Destionations = [];

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;
        Trucks = await TruckService.GetAsync(TripStatus.Closed.ToString(), AppState.GetCancellationToken());
        Depots = await StationService.GetAsync(StationType.LoadingDepot.ToString(), AppState.GetCancellationToken());
        Destionations = await StationService.GetAsync(StationType.DischargeStation.ToString(), AppState.GetCancellationToken());
        Drivers = await DriverService.GetAsync(AppState.GetCancellationToken());
        if (Id.HasValue)
        {
            CurrentTrip = await TripService.GetAsync(Id.Value, AppState.GetCancellationToken()) ?? new();
            EditMode = true;
        }                                
        AppState.IsBusy = false;
    }

    private void OnTruckChanged()
    {        
        var truck = Trucks?.FirstOrDefault(x => x.Id == tripLoading!.TruckId);
        tripLoading!.LicensePlate = truck!.LicensePlate;
        @* tripLoading!.DispatchUnit = truck.Product *@
        StateHasChanged();
    }
    private void LocationChanged(string location)
    {
        tripLoading!.Destination = location;
        StateHasChanged();
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields
        if (tripLoading!.LoadingDate is null)
        {
            errors["LoadingDate"] = "Loading Date is required";
        }

        if (tripLoading!.TruckId.Equals(Guid.Empty))
        {
            errors["TruckId"] = "Truck is required";
        }

        if (string.IsNullOrWhiteSpace(tripLoading.DispatchId))
        {
            errors["WaybillNumber"] = "Waybill Number is required";
        }

        if (tripLoading!.LoadingPointId.Equals(Guid.Empty))
        {
            errors["LoadingPointId"] = "Loading Point is required";
        }

        if (string.IsNullOrWhiteSpace(tripLoading.Destination))
        {
            errors["Destination"] = "Destination is required";
        }

        if (tripLoading!.DriverId.Equals(Guid.Empty) || tripLoading!.DriverId is null)
        {
            errors["DriverId"] = "Driver is required";
        }

        if (tripLoading!.DispatchQuantity is null || tripLoading!.DispatchQuantity <= 0)
        {
            errors["DispatchQuantity"] = "Dispatch Quantity is required";
        }

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }
                
        try
        {           
            if (!Id.HasValue)
            {
                CurrentTrip = TripService.MapTripLoadingAsync(tripLoading, AppState.GetCancellationToken());
                result = await TripService.AddAsync(CurrentTrip, AppState.GetCancellationToken());
            }
            else
            {
                result = await TripService.UpdateAsync(CurrentTrip, AppState.GetCancellationToken());
            }

            alert = new($"Trip Successfully {(EditMode ? "Updated" : "Added")}", ToastIcon.Succees);
            if (result)
                Cancel();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            alert = new($"Operation failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    
    private void Cancel()
    {
        nav.NavigateTo("trips");
    }
}