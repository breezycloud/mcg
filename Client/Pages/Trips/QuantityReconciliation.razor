<div class="bg-white rounded-lg shadow-md p-6">
    <h3 class="text-lg font-semibold mb-4">Quantity Reconciliation (0.29% Tolerance)</h3>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <!-- Initial Loading -->
        <div class="bg-blue-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-blue-800 mb-1">Initial Loading</h4>
            <p class="text-2xl font-bold text-blue-600">@LoadingQuantity.ToString("N2") @Unit</p>
        </div>

         <!-- Total Discharged -->
        <div class="bg-green-50 p-4 border rounded-lg">
            <h4 class="text-sm font-medium text-green-800 mb-1">Total Discharged</h4>
            <p class="text-2xl font-bold text-green-600">@TotalDischarged.ToString("N2") @Unit</p>
        </div>

        <!-- Variance Indicator -->
        <div class="@GetVarianceBgClass() p-4 rounded-lg border @GetVarianceBorderClass()">
            <h4 class="text-sm font-medium @GetVarianceTextClass() mb-1">@GetVarianceType().ToUpper()</h4>
            <p class="text-2xl font-bold @GetVarianceTextClass()">
                @Math.Abs(Variance).ToString("N2") @Unit 
                <span class="text-sm">(@GetVariancePercentage().ToString("N2")%)</span>
            </p>
        </div>
    </div>

    <!-- Tolerance Alert -->
    @if (Math.Abs(VariancePercentage) > TolerancePercentage)
    {
        <div class="mb-4 p-3 rounded-lg @(Variance > 0 ? "bg-yellow-50 border border-yellow-200" : "bg-red-50 border border-red-200")">
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 @(Variance > 0 ? "text-yellow-600" : "text-red-600")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <span class="@(Variance > 0 ? "text-yellow-800" : "text-red-800") font-medium">
                    @GetToleranceAlertMessage()
                </span>
            </div>
        </div>
    }

    <!-- Discharge Details Table -->
    <div class="overflow-x-auto mb-6">
        <table class="w-full text-sm text-left text-gray-500">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                <tr>
                    <th class="px-6 py-3">Station</th>
                    <th class="px-6 py-3 text-right">Discharge Qty (@Unit)</th>
                    <th class="px-6 py-3 text-right">Cumulative</th>
                    <th class="px-6 py-3 text-right">Variance</th>
                </tr>
            </thead>
            <tbody>
                @{
                    decimal runningTotal = 0;
                }
                @foreach (var discharge in Discharges)
                {
                    runningTotal += discharge.QuantityDischarged;
                    var stationVariance = runningTotal - LoadingQuantity;
                    
                    <tr class="bg-white border-b hover:bg-gray-50">
                        <td class="px-6 py-4 font-medium text-gray-900">@discharge.Station?.Name</td>
                        <td class="px-6 py-4 text-right">@discharge.QuantityDischarged.ToString("N2")</td>
                        <td class="px-6 py-4 text-right">@runningTotal.ToString("N2")</td>
                        <td class="px-6 py-4 text-right @GetStationVarianceClass(stationVariance)">
                            @(stationVariance >= 0 ? "+" : "")@stationVariance.ToString("N2") @Unit
                            @if (Math.Abs(stationVariance/LoadingQuantity*100) > TolerancePercentage)
                            {
                                <svg class="w-4 h-4 inline ml-1 @(stationVariance > 0 ? "text-yellow-500" : "text-red-500")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public decimal LoadingQuantity { get; set; }
    [Parameter]
    public string? Unit { get; set; }

    [Parameter]
    public List<Discharge> Discharges { get; set; } = new();

    [Parameter] public decimal TolerancePercentage { get; set;} = 0.29m; // Your 0.29% tolerance
    
    private decimal TotalDischarged => Discharges?.Sum(d => d.QuantityDischarged) ?? 0m;
    private decimal Variance => TotalDischarged - LoadingQuantity; // Positive = Overage, Negative = Shortage
    private decimal VariancePercentage => (Math.Abs(Variance) / LoadingQuantity) * 100m;
    private decimal AllowedVariance => LoadingQuantity * (TolerancePercentage / 100m);

    private string GetVarianceType() => Variance >= 0 ? "Overage" : "Shortage";

    private string GetVarianceBgClass() => 
        Math.Abs(VariancePercentage) <= TolerancePercentage ? "bg-green-50" : 
        Variance > 0 ? "bg-yellow-50" : "bg-red-50";

    private string GetVarianceBorderClass() => 
        Math.Abs(VariancePercentage) <= TolerancePercentage ? "border-green-200" : 
        Variance > 0 ? "border-yellow-200" : "border-red-200";

    private string GetVarianceTextClass() => 
        Math.Abs(VariancePercentage) <= TolerancePercentage ? "text-green-600" : 
        Variance > 0 ? "text-yellow-600" : "text-red-600";

    private string GetStationVarianceClass(decimal variance) => 
        Math.Abs(variance/LoadingQuantity*100) <= TolerancePercentage ? "text-gray-600" : 
        variance > 0 ? "text-yellow-600" : "text-red-600";
    
    private decimal GetVariancePercentage() => (Math.Abs(Variance) / LoadingQuantity) * 100m;

    private string GetToleranceAlertMessage()
    {
        var absVariance = Math.Abs(VariancePercentage);
        return Variance > 0
            ? $"Overage exceeds {TolerancePercentage}% tolerance by {absVariance-TolerancePercentage:N2}%"
            : $"Shortage exceeds {TolerancePercentage}% tolerance by {absVariance-TolerancePercentage:N2}%";
    }
}