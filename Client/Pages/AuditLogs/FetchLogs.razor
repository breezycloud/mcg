@page "/audit-logs"
@attribute [Authorize]
@inject IAuditLogService AuditLogService

<div class="p-4 sm:p-6">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Audit Logs</h2>
        <div class="flex space-x-2 mt-4 md:mt-0">
            <button @onclick="ExportToCsv" 
                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:ring-gray-200 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600 dark:focus:ring-gray-700">
                Export to CSV
            </button>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white shadow rounded-lg p-4 mb-6 dark:bg-gray-800">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Search</label>
                <input type="text" @bind="searchTerm" @oninput="async () => await LoadLogs()"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                       placeholder="Search logs...">
            </div>
            <div>
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Entity Type</label>
                @* @onchange="async () => await LoadLogs()" *@
                <select @bind="entityType" 
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                    <option value="">All Types</option>
                    <option value="User">Users</option>
                    <option value="Trip">Trips</option>
                    <option value="Driver">Drivers</option>
                </select>
            </div>
            <div>
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">From Date</label>
                <input type="date" @bind="fromDate" 
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                       @* @onchange="async () => await LoadLogs()" *@
            </div>
            <div>
                @* @onchange="async () => await LoadLogs()" *@
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">To Date</label>
                <input type="date" @bind="toDate" 
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            </div>
        </div>
    </div>

    <!-- Logs Table -->
    <div class="bg-white shadow rounded-lg overflow-hidden dark:bg-gray-800">
        <div class="overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th scope="col" class="px-6 py-3">Timestamp</th>
                        <th scope="col" class="px-6 py-3">User</th>
                        <th scope="col" class="px-6 py-3">Action</th>
                        <th scope="col" class="px-6 py-3">Entity</th>
                        <th scope="col" class="px-6 py-3">Details</th>
                        <th scope="col" class="px-6 py-3">IP Address</th>
                    </tr>
                </thead>
                <tbody>
                    @if (logs?.Data?.Any() ?? false)
                    {
                        foreach (var log in logs.Data)
                        {
                            <tr class="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @log.Timestamp.ToString("g")
                                </td>
                                <td class="px-6 py-4">
                                    <div class="font-medium text-gray-900 dark:text-white">@log.UserName</div>
                                    <div class="text-xs text-gray-500">@log.UserId</div>
                                </td>
                                <td class="px-6 py-4">
                                    <span class="@GetActionBadgeClass(log.Action) text-xs font-medium px-2.5 py-0.5 rounded-full">
                                        @log.Action
                                    </span>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="font-medium">@log.EntityType</div>
                                    @if (!string.IsNullOrEmpty(log.EntityId))
                                    {
                                        <div class="text-xs text-gray-500">ID: @log.EntityId</div>
                                    }
                                </td>
                                <td class="px-6 py-4">
                                    @if (!string.IsNullOrEmpty(log.AffectedFields))
                                    {
                                        <div class="text-sm">Changed: @log.AffectedFields</div>
                                    }
                                    @if (!string.IsNullOrEmpty(log.AdditionalInfo))
                                    {
                                        <div class="text-xs text-gray-500">@log.AdditionalInfo</div>
                                    }
                                </td>
                                <td class="px-6 py-4">
                                    @log.IpAddress
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
                                No audit logs found
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="p-4 border-t border-gray-200 dark:border-gray-700">
            @* <Pagination CurrentPage="logs.CurrentPage"
                       PageSize="logs.PageSize"
                       TotalItems="logs.TotalItems"
                       OnPageChanged="async (page) => { currentPage = page; await LoadLogs(); }" /> *@
        </div>
    </div>
</div>

@code {
    private GridDataResponse<AuditLog> logs = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = string.Empty;
    private string entityType = string.Empty;
    private DateTime? fromDate = null;
    private DateTime? toDate = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        logs = await AuditLogService.GetPagedAsync(
            currentPage, 
            pageSize, 
            searchTerm, 
            fromDate, 
            toDate,
            entityType);
    }

    private string GetActionBadgeClass(string action)
    {
        return action switch
        {
            "Create" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "Update" => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "Delete" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            "Login" => "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
            "Logout" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private async Task ExportToCsv()
    {
        // Implementation for CSV export
        // Would typically call an API endpoint that returns CSV data
    }
}