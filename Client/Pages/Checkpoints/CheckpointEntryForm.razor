@page "/checkpoint/{Action}/{Id:guid?}"
@inject ICheckpointService CheckpointService

<div class="max-w-2xl mx-auto p-4 sm:p-6">
    @if (AppState.IsBusy)
    {
        <Loader />
    }
    else
    {
        <div class="mb-6">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white">@((EditMode ? "Edit" : "Add New") + " Checkpoint")</h2>
            <p class="text-sm text-gray-500 dark:text-gray-400">Fill in the checkpoint details below.</p>
        </div>

        @* <EditForm Model="@CurrentCheckpoint" OnValidSubmit="HandleSubmit" class="space-y-6">
            @if (alert is not null)
            {
                <Toast Icon="@alert.Icon" Message="@alert.Message" />
            }

            <!-- Station -->
            <div>
                <label for="station" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Station <span class="text-red-500">*</span>
                </label>
                <InputSelect id="station" @bind-Value="CurrentCheckpoint.StationId" class="@GetInputClass("StationId")">
                    <option value="">Select Station</option>
                    @foreach (var station in stations)
                    {
                        <option value="@station.Id">@StringConverter.ToDescription(type)</option>
                    }
                </InputSelect>
                @if (errors.ContainsKey("StationId"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["StationId"]</p>
                }
            </div>

            <!-- Checkpoint Name -->
            <div>
                <label for="checkpointName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Checkpoint Name <span class="text-red-500">*</span>
                </label>
                <InputText id="checkpointName" @bind-Value="CurrentCheckpoint.Name" class="@GetInputClass("Name")" maxlength="100" placeholder="Enter checkpoint name" />
                @if (errors.ContainsKey("Name"))
                {
                    <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Name"]</p>
                }
            </div>

            <!-- Estimated Arrival Time -->
            <div>
                <label for="estimatedArrivalTime" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Estimated Arrival Time (minutes)
                </label>
                <InputNumber id="estimatedArrivalTime" @bind-Value="CurrentCheckpoint.EstimatedArrivalTime" class="@GetInputClass("EstimatedArrivalTime")" step="0.01" />
            </div>

            <!-- Latitude -->
            <div>
                <label for="latitude" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Latitude
                </label>
                <InputNumber id="latitude" @bind-Value="CurrentCheckpoint.Latitude" class="@GetInputClass("Latitude")" step="0.000001" />
            </div>

            <!-- Longitude -->
            <div>
                <label for="longitude" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Longitude
                </label>
                <InputNumber id="longitude" @bind-Value="CurrentCheckpoint.Longitude" class="@GetInputClass("Longitude")" step="0.000001" />
            </div>

            <!-- Timestamps -->
            @if (EditMode)
            {
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block mb-2 text-sm text-gray-500 dark:text-gray-400">Created At</label>
                        <div class="bg-gray-50 border border-gray-300 text-sm p-2.5 rounded-lg dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @CurrentCheckpoint.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2 text-sm text-gray-500 dark:text-gray-400">Last Updated</label>
                        <div class="bg-gray-50 border border-gray-300 text-sm p-2.5 rounded-lg dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @(CurrentCheckpoint.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                        </div>
                    </div>
                </div>
            }

            <!-- Form Actions -->
            <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button type="button" @onclick="Cancel"
                        class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:bg-gray-700 dark:text-white dark:border-gray-600">
                    Cancel
                </button>
                <button type="submit"
                        class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700">
                    @(EditMode ? "Update Checkpoint" : "Add Checkpoint")
                </button>
            </div>
        </EditForm> *@
    }
</div>

@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public Checkpoint CurrentCheckpoint { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }

    private bool result = false;
    private NotificationAlert? alert = null;
    private Dictionary<string, string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;

        if (Id.HasValue)
        {
            CurrentCheckpoint = await CheckpointService.GetAsync(Id.Value, AppState.GetCancellationToken()) ?? new();
        }

        AppState.IsBusy = false;
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white";
        return errors.ContainsKey(fieldName)
            ? $"{baseClass} border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700"
            : $"{baseClass} border-gray-300";
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields
        if (string.IsNullOrWhiteSpace(CurrentCheckpoint.Name))
        {
            errors["Name"] = "Checkpoint name is required";
        }

        if (CurrentCheckpoint.StationId == Guid.Empty || CurrentCheckpoint.StationId is null)
        {
            errors["StationId"] = "Station must be selected";
        }

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }

        try
        {
            CurrentCheckpoint.Name = StringConverter.ConvertToTitleCase(CurrentCheckpoint.Name);

            if (!Id.HasValue)
            {
                result = await CheckpointService.AddAsync(CurrentCheckpoint, AppState.GetCancellationToken());
            }
            else
            {
                result = await CheckpointService.UpdateAsync(CurrentCheckpoint, AppState.GetCancellationToken());
            }

            alert = new($"Checkpoint successfully {(EditMode ? "updated" : "added")}", ToastIcon.Succees);
            nav.NavigateTo("checkpoints");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            alert = new("Operation failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    private void Cancel()
    {
        nav.NavigateTo("checkpoints");
    }
}
