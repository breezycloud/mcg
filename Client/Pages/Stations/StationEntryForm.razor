@page "/stations/{Action}/{Id:guid?}"
@inject IStationService StationService


<div class="max-w-2xl mx-auto p-4 sm:p-6">
    <!-- Form Header -->
    <div class="mb-6">
        <h2 class="text-xl font-bold text-gray-900 dark:text-white">@(EditMode ? "Edit Station" : "Add New Station")</h2>
        <p class="text-sm text-gray-500 dark:text-gray-400">Please fill in the station details below</p>
    </div>

    <!-- Station Form -->
    <EditForm Model="@CurrentStation" OnValidSubmit="HandleSubmit" class="space-y-6">

        @if (alert is not null)
        {
            <Toast Icon="@alert.Icon" Message="@alert.Message"/>
        }

        <!-- Station Name -->
        <div>
            <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                Station Name <span class="text-red-500">*</span>
            </label>
            <InputText id="name" @bind-Value="CurrentStation.Name"
                       class="@GetInputClass("Name")"
                       maxlength="100"
                       placeholder="Enter station name" />
            @if (errors.ContainsKey("Name"))
            {
                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Name"]</p>
            }
        </div>
        
          <!-- Station Type -->
         <div>
            <label for="type" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                Station Type <span class="text-red-500">*</span>
            </label>
            <InputSelect id="type" @bind-Value="CurrentStation.Type" class="@GetInputClass("Type")">
                <option value="">Select type</option>
                @foreach (var type in Enum.GetValues<StationType>())
                {
                    <option value="@type">@StringConverter.ToDescription(type)</option>
                }
            </InputSelect>
            @if (errors.ContainsKey("Type"))
            {
                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Type"]</p>
            }
        </div>

        <!-- Address Fields -->
        <fieldset class="border-t border-gray-200 pt-4 dark:border-gray-700">
            <legend class="text-sm font-medium text-gray-900 dark:text-white">Address</legend>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">               
                <div>
                    <label for="city" class="block text-sm font-medium text-gray-700 dark:text-white">State</label>
                    <InputText id="city" @bind-Value="CurrentStation.Address!.State"
                               class="@GetInputClass("State")"
                               placeholder="State Name" />
                </div>
                <div>
                    <label for="state" class="block text-sm font-medium text-gray-700 dark:text-white">City</label>
                    <InputText id="state" @bind-Value="CurrentStation.Address!.Location"
                               class="@GetInputClass("Location")"
                               placeholder="Location" />
                </div>               
                <div class="md:col-span-2">
                    <label for="country" class="block text-sm font-medium text-gray-700 dark:text-white">Address</label>
                    <InputText id="country" @bind-Value="CurrentStation.Address!.ContactAddress"
                               class="@GetInputClass("ContactAddress")"
                               placeholder="ContactAddress" />
                </div>
            </div>
        </fieldset>

        <!-- Is Depot Toggle -->
        @* <div class="flex items-center mt-4">
            <InputCheckbox id="isDepot" @bind-Value="CurrentStation.IsDepot"
                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600" />
            <label for="isDepot" class="ml-2 text-sm text-gray-700 dark:text-white">Is this a Depot?</label>
        </div>
 *@

       

        <!-- Timestamps -->
        @if (EditMode)
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Created At</label>
                    <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                        @CurrentStation.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                    </div>
                </div>
                <div>
                    <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Last Updated</label>
                    <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                        @(CurrentStation.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                    </div>
                </div>
            </div>
        }

        <!-- Form Actions -->
        <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
            <button type="button" @onclick="Cancel"
                class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">
                Cancel
            </button>
            <button type="submit"
                class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                @(EditMode ? "Update Station" : "Add Station")
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public Station CurrentStation { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    bool result = false;
    private NotificationAlert? alert = null;

    private Dictionary<string, string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
            CurrentStation = await StationService.GetAsync(Id.Value, AppState.GetCancellationToken()) ?? new();
        else
            CurrentStation.Address = new();
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields
        if (string.IsNullOrWhiteSpace(CurrentStation.Name))
        {
            errors["StationNo"] = "Station number is required";
        }        

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }
                
        try
        {
            CurrentStation.Name = StringConverter.ConvertToTitleCase(CurrentStation.Name);
            
            if (!string.IsNullOrWhiteSpace(CurrentStation.Address!.Location))
                CurrentStation.Address!.Location = StringConverter.ConvertToTitleCase(CurrentStation.Address!.Location);
            
            if (!string.IsNullOrWhiteSpace(CurrentStation.Address!.State))
                CurrentStation.Address!.State = StringConverter.ConvertToTitleCase(CurrentStation.Address!.State);
            
            if (!string.IsNullOrWhiteSpace(CurrentStation.Address!.ContactAddress))
                CurrentStation.Address!.ContactAddress = StringConverter.ConvertToTitleCase(CurrentStation.Address!.ContactAddress);

            if (!Id.HasValue)
            {
                result = await StationService.AddAsync(CurrentStation, AppState.GetCancellationToken());
            }
            else
            {
                result = await StationService.UpdateAsync(CurrentStation, AppState.GetCancellationToken());
            }

            alert = new($"Station Successfully {(EditMode ? "Updated" : "Added")}", ToastIcon.Succees);
            nav.NavigateTo("drivers");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            alert = new($"Operation failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    
    private void Cancel()
    {
        nav.NavigateTo("stations");
    }
}
@* @code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public Station CurrentStation { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    bool result = false;
    private NotificationAlert? alert = null;

    private Dictionary<string, string> errors = new();

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();

        // Validate required fields
        if (string.IsNullOrWhiteSpace(CurrentStation.Name))
        {
            errors["StationNo"] = "Station number is required";
        }        

        if (errors.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }
                
        try
        {
            CurrentStation.StationNo = StringConverter.ConvertToTitleCase(CurrentStation.StationNo);
            if (!string.IsNullOrWhiteSpace(CurrentStation.Manufacturer))
                CurrentStation.Manufacturer = StringConverter.ConvertToTitleCase(CurrentStation.Manufacturer);
            if (!string.IsNullOrWhiteSpace(CurrentStation.Color))
                CurrentStation.Color = StringConverter.ConvertToTitleCase(CurrentStation.Color);

            if (!Id.HasValue)
            {
                result = await StationService.AddAsync(CurrentStation, AppState.GetCancellationToken());
            }
            else
            {
                result = await StationService.UpdateAsync(CurrentStation, AppState.GetCancellationToken());
            }

            alert = new($"Station Successfully {(EditMode ? "Updated" : "Added")}", ToastIcon.Succees);
            nav.NavigateTo("drivers");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            alert = new($"Operation failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    
    private void Cancel()
    {
        nav.NavigateTo("stations")
    }
} *@