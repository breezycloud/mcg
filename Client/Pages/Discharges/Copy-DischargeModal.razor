@inject IStationService StationService

<!-- Pure Flowbite Modal Component -->
<div id="Discharge-modal" tabindex="-1" aria-hidden="@(!IsVisible)" 
     class="@(IsVisible ? "flex" : "hidden") fixed top-0 left-0 right-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full justify-center items-center bg-opacity-50">
    <div class="relative w-full max-w-2xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                    @(EditMode  ? "Edit Discharge" : "Add New Discharge")
                </h3>
                <button type="button" @onclick="CloseCheckpointModal"
                        class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            @if (IsLoading)
            {
                <div class="m-4 p-4">
                    <LoadingSpinner/>
                </div>
            }
            else
            {
            
            <!-- Modal body -->
                <div class="p-6 space-y-4">                
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="arrival-date-time" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Arrival Date/Time</label>
                            <input type="datetime-local" id="arrival-date-time" @bind="Data.TruckArrival"
                                class="@GetInputClass(nameof(Data.TruckArrival))">
                        </div>

                        <div>
                            <StationAutocomplete 
                                @bind-Value="SelectedStation"
                                Destionation="@Destination"
                                StationType="StationType.DischargeStation"
                                Label="Select Discharge Station"
                                Placeholder="Start typing station name..."
                                ShowDetails="true"
                                AllowClear="true" />

                            @* @if (SelectedStation != null)
                            {
                                <div class="mt-4 p-4 bg-green-50 rounded">
                                    <h4 class="font-bold">Selected Station:</h4>
                                    <p>@SelectedStation.Name</p>
                                    <p><small>@(StringConverter.ToDescription(SelectedStation.Type))</small></p>
                                </div>
                            } *@
                            @* <label for="StationId" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Station</label>
                            <InputSelect id="StationId"
                                class="@GetInputClass("StationId")"
                                @bind-Value="Data.StationId"
                                @bind-Value:after="OnValueChanged">
                                <option value="">-- Select Station --</option>
                                @foreach (var state in Stations)
                                {
                                    <option value="@state.Id">@StringConverter.ConvertToTitleCase(state.Name)</option>
                                }                                
                            </InputSelect> *@
                            @if (errors.ContainsKey("StationId"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["StationId"]</p>
                            }                                                    
                        </div>

                        <div>
                            <label for="discharge-start-time" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Discharge Start Time</label>
                            <input type="datetime-local" id="discharge-start-time" @bind="Data.DischargeStartTime"
                                class="@GetInputClass(nameof(Data.DischargeStartTime))">
                            @if (errors.ContainsKey("DischargeStartTime"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["DischargeStartTime"]</p>
                            }
                        </div>
                        <div>
                            <label for="quantity-discharged" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Quantity Discharged</label>
                            <input type="number" id="quantity-discharged" step="0.01" 
                                @bind="Data.QuantityDischarged"
                                max="@InitialQuantity"
                                class="@GetInputClass(nameof(Data.QuantityDischarged))">
                            @if (errors.ContainsKey("QuantityDischarged"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["QuantityDischarged"]</p>
                            }
                        </div>

                        <div>
                            <FileUploadView OnFilesUploaded="@OnUploadComplete"/>
                        </div>
                        
                        @if (Data.Files.Any())
                        {
                            <div>
                                <FileListView Files="Data.Files" ShowDelete="@(Data.Files.Any())" OnDelete="@OnDelete" />
                            </div>
                        }
                        <div class="flex items-center space-x-2 mt-6">
                            <input type="checkbox" id="is-final-discharge" @bind="Data.IsFinalDischarge"
                                class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                            <label for="is-final-discharge" class="text-sm font-medium text-gray-900 dark:text-white">Final Discharge</label>
                        </div>                        
                    </div>
                    <div>
                        <label for="notes" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Notes</label>
                        <textarea id="notes" rows="3" maxlength="500" @bind="Data.Notes"
                                class="@GetInputClass(nameof(Data.Notes))"></textarea>
                    </div>                                                
                </div>
            }
            
            <!-- Modal footer -->
            <div class="flex items-center justify-end p-6 space-x-2 border-t border-gray-200 rounded-b dark:border-gray-600">
                <button @onclick="CloseCheckpointModal" type="button"
                        class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">
                    Cancel
                </button>
                <button @onclick="SaveCheckpoint" type="button"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    @(EditMode  ? "Add Discharge" : "Save Changes")
                </button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public bool IsVisible { get; set; } = false;
    [Parameter]
    public decimal InitialQuantity { get; set; }
    [Parameter]
    public string? Destination { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;
    [Parameter]
    public Discharge Data { get; set; } = new();
    private Discharge? editingDischarge;
    private bool showDeleteDischargeModal = false;
    private Discharge? checkpointToDelete;
    [Parameter]
    public EventCallback<Discharge> OnSave { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }

    private Dictionary<string, string> errors = new();
    private bool IsLoading = false;

    private Station? SelectedStation;
    
    private Station[]? Stations = [];

    protected override async Task OnInitializedAsync()
    {        
        if (string.IsNullOrEmpty(Destination))
        {
            ToastService.ShowInfo("Trip has not reached discharge destionation");
            CloseCheckpointModal();
            return;
        }
        IsLoading = true;        
        await Task.Delay(500);
        @* Stations = await StationService.GetAsync(StationType.DischargeStation.ToString(), Destination!, AppState.GetCancellationToken());         *@
        IsLoading = false;
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    void OnValueChanged()
    {
        Data.Station = Stations!.FirstOrDefault(x => x.Id == Data.StationId);
        StateHasChanged();
    }

    private async Task SaveCheckpoint()
    {        
        errors.Clear();

        if (SelectedStation is null)
        {
            errors[nameof(Data.StationId)] = "Station is required.";
        }
        else
        {
            Data.StationId = SelectedStation.Id;
        }
        if (Data.QuantityDischarged <= 0)
        {
            errors[nameof(Data.QuantityDischarged)] = "Quantity discharged must be greater than zero.";
        }
        @* if (Data.QuantityDischarged > InitialQuantity)
        {
            errors[nameof(Data.QuantityDischarged)] = $"Quantity can't exceed quantity of {InitialQuantity}.";
        } *@
        if (Data.DischargeStartTime == default || Data.DischargeStartTime is null)
        {
            errors[nameof(Data.DischargeStartTime)] = "Discharge start time is required.";
        }
        if (errors.Count > 0)
        {
            ToastService.ShowWarning("Fill the required fields to proceed");
            StateHasChanged();
            return; // Validation failed, do not proceed
        }

        if (!string.IsNullOrEmpty(Data!.Notes))
            Data.Notes = StringConverter.ConvertToTitleCase(Data.Notes);
        await OnSave.InvokeAsync(Data);
    }

    private async Task OnUploadComplete(List<UploadResult> files)
    {                
        if (files.Any())
        {
            Data.Files.AddRange(files);
            await OnSave.InvokeAsync(Data);
        }
        StateHasChanged();        
    }

    private async Task OnDelete(UploadResult file)
    {
        if (string.IsNullOrWhiteSpace(file.FileName))        
            return;

        Data.Files.Remove(file);
        await OnSave.InvokeAsync(Data);
    }

    private async Task CloseCheckpointModal()
    {
        IsVisible = false;        
        EditMode = false;
        await OnClose.InvokeAsync();
    }
}