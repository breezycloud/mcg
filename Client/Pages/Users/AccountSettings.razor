<div class="max-w-4xl mx-auto p-4 sm:p-6">
    <!-- Settings Header -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
        <div>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Account Settings</h1>
            <p class="text-sm text-gray-500 dark:text-gray-400">Update your personal information and security settings</p>
        </div>
        <button @onclick="NavigateToProfile" 
                class="flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:ring-gray-200 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600 dark:focus:ring-gray-700">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
            Back to Profile
        </button>
    </div>

    <!-- Settings Tabs -->
    <div class="border-b border-gray-200 dark:border-gray-700 mb-6">
        <ul class="flex flex-wrap -mb-px">
            <li class="mr-2">
                <button @onclick="() => SetActiveTab(1)" 
                        class="@GetTabClass(1) inline-block p-4 border-b-2 rounded-t-lg">
                    Personal Information
                </button>
            </li>
            <li class="mr-2">
                <button @onclick="() => SetActiveTab(2)" 
                        class="@GetTabClass(2) inline-block p-4 border-b-2 rounded-t-lg">
                    Security
                </button>
            </li>
            <li>
                <button @onclick="() => SetActiveTab(3)" 
                        class="@GetTabClass(3) inline-block p-4 border-b-2 rounded-t-lg">
                    Preferences
                </button>
            </li>
        </ul>
    </div>

    <!-- Settings Content -->
    <div class="bg-white shadow rounded-lg overflow-hidden dark:bg-gray-800">
        @if (activeTab == 1)
        {
            <!-- Personal Information Tab -->
            <form @onsubmit="HandlePersonalInfoSubmit" class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="firstName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            First Name <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="firstName" @bind="User.FirstName"
                               class="@GetInputClass("FirstName")"
                               placeholder="John">
                        @if (errors.ContainsKey("FirstName"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["FirstName"]</p>
                        }
                    </div>
                    <div>
                        <label for="lastName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                            Last Name <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="lastName" @bind="User.LastName"
                               class="@GetInputClass("LastName")"
                               placeholder="Doe">
                        @if (errors.ContainsKey("LastName"))
                        {
                            <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["LastName"]</p>
                        }
                    </div>
                </div>

                <div>
                    <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Email <span class="text-red-500">*</span>
                    </label>
                    <input type="email" id="email" @bind="User.Email"
                           class="@GetInputClass("Email")"
                           placeholder="user@example.com">
                    @if (errors.ContainsKey("Email"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Email"]</p>
                    }
                </div>

                <div>
                    <label for="phoneNo" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Phone Number
                    </label>
                    <input type="tel" id="phoneNo" @bind="User.PhoneNo"
                           class="@GetInputClass("PhoneNo")"
                           placeholder="12345678901"
                           maxlength="11">
                    @if (errors.ContainsKey("PhoneNo"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["PhoneNo"]</p>
                    }
                    <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Must be exactly 11 digits</p>
                </div>

                <div class="flex justify-end pt-4 border-t border-gray-200 dark:border-gray-700">
                    <button type="submit"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700">
                        Save Changes
                    </button>
                </div>
            </form>
        }
        else if (activeTab == 2)
        {
            <!-- Security Tab -->
            <form @onsubmit="HandleSecuritySubmit" class="p-6 space-y-6">
                <div>
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Change Password</h3>
                    <div class="space-y-4">
                        <div>
                            <label for="currentPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                Current Password <span class="text-red-500">*</span>
                            </label>
                            <input type="password" id="currentPassword" @bind="currentPassword"
                                   class="@GetInputClass("CurrentPassword")"
                                   placeholder="••••••••">
                            @if (errors.ContainsKey("CurrentPassword"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["CurrentPassword"]</p>
                            }
                        </div>
                        <div>
                            <label for="newPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                New Password <span class="text-red-500">*</span>
                            </label>
                            <input type="password" id="newPassword" @bind="newPassword"
                                   class="@GetInputClass("NewPassword")"
                                   placeholder="••••••••">
                            @if (errors.ContainsKey("NewPassword"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["NewPassword"]</p>
                            }
                            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Minimum 8 characters</p>
                        </div>
                        <div>
                            <label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                Confirm New Password <span class="text-red-500">*</span>
                            </label>
                            <input type="password" id="confirmPassword" @bind="confirmPassword"
                                   class="@GetInputClass("ConfirmPassword")"
                                   placeholder="••••••••">
                            @if (errors.ContainsKey("ConfirmPassword"))
                            {
                                <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["ConfirmPassword"]</p>
                            }
                        </div>
                    </div>
                </div>

                <div class="flex justify-end pt-4 border-t border-gray-200 dark:border-gray-700">
                    <button type="submit"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700">
                        Update Password
                    </button>
                </div>
            </form>
        }
        else if (activeTab == 3)
        {
            <!-- Preferences Tab -->
            <form @onsubmit="HandlePreferencesSubmit" class="p-6 space-y-6">
                <div>
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Display Preferences</h3>
                    <div class="flex items-center mb-4">
                        <input id="darkMode" type="checkbox" @bind="darkModeEnabled"
                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                        <label for="darkMode" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                            Enable Dark Mode
                        </label>
                    </div>
                    <div class="flex items-center mb-4">
                        <input id="notifications" type="checkbox" @bind="notificationsEnabled"
                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                        <label for="notifications" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                            Enable Email Notifications
                        </label>
                    </div>
                </div>

                <div>
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Language & Region</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="language" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                Language
                            </label>
                            <select id="language" @bind="selectedLanguage"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                <option value="en">English</option>
                                <option value="es">Spanish</option>
                                <option value="fr">French</option>
                            </select>
                        </div>
                        <div>
                            <label for="timezone" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                                Timezone
                            </label>
                            <select id="timezone" @bind="selectedTimezone"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                <option value="UTC">UTC</option>
                                <option value="EST">Eastern Time (EST)</option>
                                <option value="CST">Central Time (CST)</option>
                                <option value="PST">Pacific Time (PST)</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end pt-4 border-t border-gray-200 dark:border-gray-700">
                    <button type="submit"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700">
                        Save Preferences
                    </button>
                </div>
            </form>
        }
    </div>
</div>

@code {
    private int activeTab = 1;
    private Dictionary<string, string> errors = new();
    private string currentPassword = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private bool darkModeEnabled = false;
    private bool notificationsEnabled = true;
    private string selectedLanguage = "en";
    private string selectedTimezone = "UTC";

    [Parameter]
    public User User { get; set; } = new();

    [Parameter]
    public EventCallback NavigateToProfile { get; set; }

    [Parameter]
    public EventCallback<User> OnPersonalInfoUpdate { get; set; }

    [Parameter]
    public EventCallback<string> OnPasswordChange { get; set; }

    [Parameter]
    public EventCallback<Dictionary<string, object>> OnPreferencesUpdate { get; set; }

    private void SetActiveTab(int tabNumber)
    {
        activeTab = tabNumber;
        errors.Clear();
    }

    private string GetTabClass(int tabNumber)
    {
        return activeTab == tabNumber 
            ? "text-blue-600 border-blue-600 dark:text-blue-500 dark:border-blue-500" 
            : "border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300";
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = "bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += " border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700";
        }
        else
        {
            baseClass += " border-gray-300";
        }
        
        return baseClass;
    }

    private async Task HandlePersonalInfoSubmit()
    {
        errors.Clear();
        
        if (string.IsNullOrWhiteSpace(User.FirstName))
        {
            errors["FirstName"] = "First name is required";
        }
        
        if (string.IsNullOrWhiteSpace(User.LastName))
        {
            errors["LastName"] = "Last name is required";
        }
        
        if (string.IsNullOrWhiteSpace(User.Email))
        {
            errors["Email"] = "Email is required";
        }
        else if (!User.Email.Contains("@"))
        {
            errors["Email"] = "Valid email is required";
        }
        
        if (!string.IsNullOrWhiteSpace(User.PhoneNo) && !System.Text.RegularExpressions.Regex.IsMatch(User.PhoneNo, @"^\d{11}$"))
        {
            errors["PhoneNo"] = "Phone number must be exactly 11 digits";
        }
        
        if (errors.Count == 0)
        {
            User.UpdatedAt = DateTimeOffset.UtcNow;
            await OnPersonalInfoUpdate.InvokeAsync(User);
        }
    }

    private async Task HandleSecuritySubmit()
    {
        errors.Clear();
        
        if (string.IsNullOrWhiteSpace(currentPassword))
        {
            errors["CurrentPassword"] = "Current password is required";
        }
        
        if (string.IsNullOrWhiteSpace(newPassword))
        {
            errors["NewPassword"] = "New password is required";
        }
        else if (newPassword.Length < 8)
        {
            errors["NewPassword"] = "Password must be at least 8 characters";
        }
        
        if (newPassword != confirmPassword)
        {
            errors["ConfirmPassword"] = "Passwords do not match";
        }
        
        if (errors.Count == 0)
        {
            await OnPasswordChange.InvokeAsync(newPassword);
            currentPassword = string.Empty;
            newPassword = string.Empty;
            confirmPassword = string.Empty;
        }
    }

    private async Task HandlePreferencesSubmit()
    {
        var preferences = new Dictionary<string, object>
        {
            { "DarkMode", darkModeEnabled },
            { "Notifications", notificationsEnabled },
            { "Language", selectedLanguage },
            { "Timezone", selectedTimezone }
        };
        
        await OnPreferencesUpdate.InvokeAsync(preferences);
    }
}