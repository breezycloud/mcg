@page "/incident/{id:guid}"
@using System.Text
@using Shared.Interfaces.Incidents
@using Shared.Models.Incidents
@inject IIncidentService IncidentService

<div class="max-w-4xl mx-auto p-4 sm:p-6">
    @if (AppState.IsBusy)
    {
        <Loader />
    }
    else
    {
        @if (Incident == null)
        {
            <div class="text-center py-8">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h3 class="mt-2 text-lg font-medium text-gray-900 dark:text-white">Incident not found</h3>
                <p class="mt-1 text-gray-500 dark:text-gray-400">The requested incident could not be loaded.</p>
                <div class="mt-6">
                    <button @onclick="NavigateToList"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Back to incidents
                    </button>
                </div>
            </div>
        }
        else
        {
            <!-- Header -->
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Incident #@Incident.Id.ToString().Substring(0, 8)</h1>
                    <div class="flex items-center mt-2">
                        <span class="@GetStatusBadgeClass(Incident.Status) text-xs font-medium px-2.5 py-0.5 rounded-full mr-2">
                            @(StringConverter.ToDescription(Incident.Status))
                        </span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">
                            Created @Incident.CreatedAt.ToString("g")
                        </span>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <button @onclick="NavigateToList"
                            class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-700 dark:hover:bg-blue-800 dark:focus:ring-blue-800">
                        Back to List
                    </button>
                </div>
            </div>

            <!-- Main Card -->
            <div class="bg-white shadow rounded-lg divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
                <!-- Request Details -->
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Incident Information</h3>
                            <div class="space-y-4">
                                <div>
                                    <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Dispatch #</p>
                                    <p class="text-gray-900 dark:text-white">@(Incident.Trip?.DispatchId ?? "N/A")</p>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Incident Type</p>
                                    <p class="text-gray-900 dark:text-white">@(Incident.IncidentType?.Type ?? "Unknown")</p>
                                </div>                                
                                <div>
                                    <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Description</p>
                                    <p class="text-gray-900 dark:text-white">@Incident.Description</p>
                                </div>
                            </div>
                        </div>
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Related Information</h3>
                            <div class="space-y-4">
                                <div>
                                    <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Truck</p>
                                    <p class="text-gray-900 dark:text-white">
                                        @(Incident.Truck != null ? $"{Incident.Truck.LicensePlate} - {Incident.Truck.Manufacturer}" : "Not assigned")
                                    </p>
                                </div>
                                @if (Incident.DriverId is not null)
                                {
                                    <div>
                                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Driver</p>
                                        <p class="text-gray-900 dark:text-white">
                                            @(Incident.Driver != null ? Incident.Driver.ToString() : "Not assigned")
                                        </p>
                                    </div>
                                }
                                <div>
                                    <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Reported By</p>
                                    <p class="text-gray-900 dark:text-white">
                                        @(Incident.CreatedBy != null ? $"{Incident.CreatedBy.FirstName} {Incident.CreatedBy.LastName}" : "Unknown")
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Status Timeline -->
                <div class="p-6">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Status Timeline</h3>
                    @if (Incident.History == null || !Incident.History.Any())
                    {
                        <p class="text-sm text-gray-500 dark:text-gray-400">No updates recorded.</p>
                    }
                    else
                    {
                        var historyList = Incident.History.OrderBy(h => h.ChangedAt).ToList();
                        <div class="flow-root">
                            <ul class="-mb-8">
                                @for (int i = 0; i < historyList.Count; i++)
                                {
                                    var entry = historyList[i];
                                    var isLast = i == historyList.Count - 1;
                                    <li>
                                        <div class="relative pb-10">
                                            @if (!isLast)
                                            {
                                                <span class="absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700" aria-hidden="true"></span>
                                            }

                                            <div class="relative flex space-x-3">
                                                <div>
                                                    <span class="@GetStatusIconColor(entry.Status) h-8 w-8 rounded-full flex items-center justify-center ring-8 ring-white dark:ring-gray-800">
                                                        <svg class="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                            @if (entry.Status == IncidentStatus.New)
                                                            {
                                                                <path d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" fill="none"></path>
                                                            }
                                                            else if (entry.Status is IncidentStatus.Treated or IncidentStatus.Reported)
                                                            {
                                                                <path d="M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z"></path>
                                                            }
                                                            else if (entry.Status == IncidentStatus.Closed)
                                                            {
                                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                                            }
                                                        </svg>
                                                    </span>
                                                </div>

                                                <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                                    <div>
                                                        <p class="text-sm text-gray-500 dark:text-gray-400">
                                                            Status changed to
                                                            <span class="@GetStatusBadgeClass(entry.Status) px-2 py-0.5 rounded text-xs font-medium">
                                                                @StringConverter.ToDescription(entry.Status)
                                                            </span>
                                                            by
                                                            <span class="font-medium text-gray-900 dark:text-white">
                                                                @(entry.ChangedBy != null ? $"{entry.ChangedBy.FirstName} {entry.ChangedBy.LastName}" : "System")
                                                            </span>
                                                        </p>

                                                        @if (!string.IsNullOrEmpty(entry.Notes))
                                                        {
                                                            <div class="mt-1 bg-gray-50 dark:bg-gray-700 p-2 rounded text-sm text-gray-700 dark:text-gray-300 italic">
                                                                “@entry.Notes”
                                                            </div>
                                                        }

                                                        @if (entry.ChangedById == currentUserId)
                                                        {
                                                            <div class="flex gap-2 mt-1">
                                                                <button @onclick="() => StartEditHistory(entry)" class="text-xs text-blue-600 hover:text-blue-800 dark:text-blue-400">Edit</button>
                                                                <button @onclick="() => DeleteNote(entry)" class="text-xs text-red-600 hover:text-red-800 dark:text-red-400">Delete</button>
                                                            </div>
                                                        }
                                                    </div>

                                                    <div class="text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-400">
                                                        <time datetime="@entry.ChangedAt.ToString("o")">@entry.ChangedAt.ToString("g")</time>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>

                <!-- Action Buttons -->
                @if (Incident?.Status != IncidentStatus.Closed)
                {
                    <div class="p-6">
                        <div class="flex justify-end space-x-3">
                            <button @onclick="ShowAddHistoryModal"
                                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600">
                                Add Update
                            </button>
                        </div>
                    </div>
                }                
            </div>
        }
    }

    <!-- Add/Edit History Modal -->
    @if (showHistoryModal)
    {
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm" @onclick="CloseHistoryModal">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg w-full max-w-xl mx-auto" @onclick:stopPropagation>
                <div class="flex items-start justify-between p-6 border-b border-gray-200 dark:border-gray-700 rounded-t">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white">@ModalTitle</h3>
                    <button type="button" @onclick="CloseHistoryModal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-700 dark:text-gray-200 dark:hover:text-white rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 14 14">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1l6 6m0 0l6 6M7 7l-6 6m6-6l6-6"></path>
                        </svg>
                    </button>
                </div>

                <div class="p-6 space-y-5">
                    @if (canChangeStatus)
                    {
                        <div>
                            <label for="status" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">Status</label>
                            <select id="status"
                                    @bind="modalStatus"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                                @foreach (var status in GetAvailableStatuses())
                                {
                                    <option value="@status">@StringConverter.ToDescription(status)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="text-sm text-gray-500 dark:text-gray-400">
                            <strong>Status:</strong> @StringConverter.ToDescription(modalStatus)
                        </div>
                    }

                    <div>
                        <label for="notes" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                            Notes @(isRequiredNote ? " *" : "(Optional)")
                        </label>
                        <textarea id="notes"
                                  @bind="modalNotes"
                                  @bind:event="oninput"
                                  rows="5"
                                  class="bg-gray-50 border @(string.IsNullOrEmpty(modalNotes) && isRequiredNote ? "border-red-500" : "border-gray-300") text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                                  placeholder="Describe what was done or observed...">
                        </textarea>
                        @if (string.IsNullOrEmpty(modalNotes) && isRequiredNote)
                        {
                            <p class="mt-1 text-sm text-red-500">Note is required when changing status.</p>
                        }
                    </div>

                    @if (modalStatus == IncidentStatus.Closed)
                    {
                        <div class="p-3 text-sm text-orange-700 bg-orange-50 dark:bg-orange-900 dark:text-orange-200 rounded-lg">
                            ⚠️ This incident is closed. You're adding a follow-up note without changing status.
                        </div>
                    }
                </div>

                <div class="flex justify-end p-6 space-x-3 border-t border-gray-200 dark:border-gray-700 rounded-b">
                    <button type="button"
                            @onclick="CloseHistoryModal"
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600">
                        Cancel
                    </button>
                    @if (Incident?.Status != IncidentStatus.Closed)
                    {
                        <button type="button"
                            @onclick="SaveHistory"
                            disabled="@(!canSave)"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg @(canSave ? "hover:bg-blue-700" : "opacity-50 cursor-not-allowed") focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700">
                            @SaveButtonText
                        </button>
                    }                    
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private Incident? Incident;
    private bool showHistoryModal = false;
    private IncidentStatus modalStatus;
    private string modalNotes = string.Empty;
    private Guid? editingHistoryId = null;

    private Guid currentUserId;

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;
        try
        {
            currentUserId = await localStorage.GetItemAsync<Guid>("uid");
            await LoadIncident();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading incident: {ex.Message}");
            Incident = null;
        }
        finally
        {
            AppState.IsBusy = false;
        }
    }

    private async Task LoadIncident()
    {
        try
        {
            Incident = await IncidentService.GetAsync(Id, AppState.GetCancellationToken());
        }
        catch
        {
            Incident = null;
        }
    }

    // Status Badge Class
    private string GetStatusBadgeClass(IncidentStatus status) =>
        status switch
        {
            IncidentStatus.New => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            IncidentStatus.Treated => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            IncidentStatus.Reported or IncidentStatus.Resolved => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            IncidentStatus.Closed => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };

    // Status Icon Color
    private string GetStatusIconColor(IncidentStatus status) =>
        status switch
        {
            IncidentStatus.New => "bg-yellow-500",
            IncidentStatus.Treated => "bg-blue-500",
            IncidentStatus.Reported or IncidentStatus.Resolved => "bg-green-500",
            IncidentStatus.Closed => "bg-red-500",
            _ => "bg-gray-500"
        };

    // Modal Logic
    private string ModalTitle => editingHistoryId.HasValue ? "Edit Update" : "Add Status Update";
    private string SaveButtonText => editingHistoryId.HasValue ? "Save Changes" : "Add Update";
    private bool canChangeStatus => !editingHistoryId.HasValue;
    private bool isRequiredNote => canChangeStatus && modalStatus != IncidentStatus.New;
    private bool canSave => !string.IsNullOrWhiteSpace(modalNotes) || !isRequiredNote;

    public void ShowAddHistoryModal()
    {
        modalStatus = Incident?.Status ?? IncidentStatus.Treated;
        modalNotes = string.Empty;
        editingHistoryId = null;
        showHistoryModal = true;
    }

    public void StartEditHistory(IncidentHistory entry)
    {
        if (entry.ChangedById != currentUserId) return;

        modalStatus = entry.Status;
        modalNotes = entry.Notes ?? string.Empty;
        editingHistoryId = entry.Id;
        showHistoryModal = true;
    }

    private async Task SaveHistory()
    {
        if (!canSave) return;

        try
        {
            AppState.IsBusy = true;

            Console.WriteLine(modalStatus.ToString());

            if (editingHistoryId.HasValue)
            {
                var history = Incident?.History.FirstOrDefault(h => h.Id == editingHistoryId.Value);
                if (history != null)
                {
                    history.Notes = modalNotes.Trim();
                    await IncidentService.AddHistoryAsync(history, AppState.GetCancellationToken());
                }
            }
            else
            {
                var newHistory = new IncidentHistory
                {
                    IncidentId = Incident!.Id,
                    Status = modalStatus,
                    Notes = modalNotes.Trim(),
                    ChangedById = currentUserId,
                    ChangedAt = DateTimeOffset.UtcNow
                };

                await IncidentService.AddHistoryAsync(newHistory, AppState.GetCancellationToken());

                // Update incident status if changed
                if (modalStatus != Incident.Status)
                {
                    Incident.Status = modalStatus;

                    if (modalStatus == IncidentStatus.Treated && !Incident.TreatedAt.HasValue)
                    {
                        Incident.TreatedById = currentUserId;
                        Incident.TreatedAt = DateTimeOffset.UtcNow;
                    }
                    else if (modalStatus == IncidentStatus.Closed && !Incident.ClosedAt.HasValue)
                    {
                        Incident.ClosedById = currentUserId;
                        Incident.ClosedAt = DateTimeOffset.UtcNow;
                    }

                    await IncidentService.UpdateAsync(Incident, AppState.GetCancellationToken());
                }
            }
            await LoadIncident();
            CloseHistoryModal();
            if (Incident?.Status == IncidentStatus.Closed)
            {
                nav.NavigateTo("/incidents");
            }                        
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving history: {ex.Message}");
            // Optionally show user-facing error
        }
        finally
        {
            AppState.IsBusy = false;
        }
    }

    private void CloseHistoryModal()
    {
        showHistoryModal = false;
        editingHistoryId = null;
        modalNotes = string.Empty;
    }

    private IEnumerable<IncidentStatus> GetAvailableStatuses()
    {
        return (Incident?.Status) switch
        {
            IncidentStatus.New => new[] { IncidentStatus.Treated },
            IncidentStatus.Treated => new[] { IncidentStatus.Reported, IncidentStatus.Resolved, IncidentStatus.Closed },
            IncidentStatus.Reported or IncidentStatus.Resolved => new[] { IncidentStatus.Resolved, IncidentStatus.Closed },
            IncidentStatus.Closed => new[] { IncidentStatus.Closed },
            _ => Enum.GetValues<IncidentStatus>()
        };
    }

    private async Task DeleteNote(IncidentHistory entry)
    {
        if (entry.ChangedById != currentUserId) return;

        // Uncomment if you have dialog service
        // var confirm = await DialogService.ShowConfirm("Delete Note", "This cannot be undone. Continue?");
        // if (!confirm) return;

        try
        {
            AppState.IsBusy = true;
            await IncidentService.DeleteHistoryAsync(entry.Id, AppState.GetCancellationToken());
            await LoadIncident();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting history: {ex.Message}");
        }
        finally
        {
            AppState.IsBusy = false;
        }
    }

    private void NavigateToList() => nav.NavigateTo("/incidents");
}
