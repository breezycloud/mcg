@page "/refuelling/{Action}/{Id:guid?}"
@inject IRefuelInfoService RefuelInfoService
@inject ITruckService TruckService
@inject IStationService StationService

<div class="max-w-2xl mx-auto p-4 sm:p-6">
    @if (AppState.IsBusy)
    {
        <Loader/>
    }
    else
    {
        <!-- Form Header -->
        <div class="mb-6">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white">@(EditMode ? "Edit Refuel Info" : "Add New Info")</h2>
            <p class="text-sm text-gray-500 dark:text-gray-400">Please fill in the details below</p>
        </div>

        <!-- RefuelInfo Form -->
        <EditForm Model="@CurrentRefuelInfo" OnValidSubmit="@HandleSubmit" class="space-y-6">
            @if (alert is not null)
            {
                <Toast Icon="@alert.Icon" Message="@alert.Message"/>
            }

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Date -->
                <div>
                    <label for="date" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Date <span class="text-red-500">*</span>
                    </label>
                    <InputDate id="date" @bind-Value="CurrentRefuelInfo!.Date"
                        class="@GetInputClass("Date")" />
                    @if (errors.ContainsKey("Date"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Date"]</p>
                    }
                </div>

                <!-- Truck -->
                <div>
                    <label for="truck" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Truck <span class="text-red-500">*</span>
                    </label>
                    <InputSelect id="truck" @bind-Value="CurrentRefuelInfo.TruckId" class="@GetInputClass("TruckId")">
                        <option value="">Select Truck</option>
                        @if (Trucks != null)
                        {
                            @foreach (var truck in Trucks)
                            {
                                <option value="@truck.Id">@truck.LicensePlate</option>
                            }
                        }
                    </InputSelect>
                    @if (errors.ContainsKey("TruckId"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["TruckId"]</p>
                    }
                </div>

                <!-- Station -->
                <div>
                    <label for="station" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Station
                    </label>
                    <InputSelect id="station" @bind-Value="CurrentRefuelInfo.StationId" class="@GetInputClass("StationId")">
                        <option value="">Select Station</option>
                        @if (Stations != null)
                        {
                            @foreach (var station in Stations)
                            {
                                <option value="@station.Id">@station.Name</option>
                            }
                        }
                    </InputSelect>
                    @if (errors.ContainsKey("StationId"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["StationId"]</p>
                    }
                </div>

                <!-- Quantity -->
                <div>
                    <label for="quantity" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Quantity <span class="text-red-500">*</span>
                    </label>
                    <InputNumber id="quantity" @bind-Value="CurrentRefuelInfo.Quantity"
                        class="@GetInputClass("Quantity")" step="0.01" />
                    @if (errors.ContainsKey("Quantity"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Quantity"]</p>
                    }
                </div>

                <!-- Unit Of Measure -->
                <div>
                    <label for="unit" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Unit <span class="text-red-500">*</span>
                    </label>
                    <InputSelect id="unit" @bind-Value="CurrentRefuelInfo.Unit" class="@GetInputClass("Unit")">
                        @foreach (var unit in Enum.GetValues(typeof(UnitOfMeasure)))
                        {
                            <option value="@unit">@unit</option>
                        }
                    </InputSelect>
                    @if (errors.ContainsKey("Unit"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Unit"]</p>
                    }
                </div>

                <!-- Price -->
                <div>
                    <label for="price" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Price
                    </label>
                    <InputNumber id="price" @bind-Value="CurrentRefuelInfo.Price"
                        class="@GetInputClass("Price")" step="0.01" />
                    @if (errors.ContainsKey("Price"))
                    {
                        <p class="mt-1 text-sm text-red-600 dark:text-red-500">@errors["Price"]</p>
                    }
                </div>
            </div>

            <!-- Dates (Display only when editing) -->
            @if (EditMode)
            {
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                            Created At
                        </label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @CurrentRefuelInfo.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">
                            Last Updated
                        </label>
                        <div class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                            @(CurrentRefuelInfo.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")
                        </div>
                    </div>
                </div>
            }

            <!-- Form Actions -->
            <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button type="button" @onclick="Cancel"
                    class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">
                    Cancel
                </button>
                <button type="submit"
                    class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 flex items-center gap-2"
                    disabled="@AppState.IsProcessing">
                    @if (AppState.IsProcessing)
                    {
                        <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                        </svg>
                        @("Processing...")
                    }
                    else
                    {
                        @(EditMode ? "Update Info" : "Add Info")
                    }
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public string Action { get; set; } = "Add";
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public RefuelInfo? CurrentRefuelInfo { get; set; } = new();
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    bool result = false;
    private NotificationAlert? alert = null;
    private Truck[]? Trucks { get; set; }
    private Station[]? Stations { get; set; }


    private Dictionary<string, string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        // Load RefuelInfo
        AppState.IsBusy = true;
        Trucks = await TruckService.GetAsync(AppState.GetCancellationToken());
        Stations = await StationService.GetAsync(StationType.RefuellingStation.ToString(), AppState.GetCancellationToken());
        if (Id.HasValue)        
        {
            CurrentRefuelInfo = await RefuelInfoService.GetAsync(Id.Value, AppState.GetCancellationToken());
            EditMode = true;
        }
        AppState.IsBusy = false;
    }

    private string GetInputClass(string fieldName)
    {
        var baseClass = $"bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 {(fieldName.Contains("PhoneNo") ? "pl-10" : "")}";
        
        if (errors.ContainsKey(fieldName))
        {
            baseClass += $" border-red-500 bg-red-50 dark:bg-red-900 dark:border-red-700 {(fieldName.Contains("PhoneNo") ? "pl-10" : "")}";
        }
        else
        {
            baseClass += $" border-gray-300 {(fieldName.Contains("PhoneNo") ? "pl-10" : "")}";
        }
        
        return baseClass;
    }

    private async Task HandleSubmit()
    {
        AppState.IsProcessing = true;
        errors.Clear();
        
        // Validate required fields
        if (string.IsNullOrWhiteSpace(CurrentRefuelInfo!.Date.ToString()))
        {
            errors["Date"] = "Date is required";
        }
        
        if (CurrentRefuelInfo.StationId is null || CurrentRefuelInfo.StationId == Guid.Empty)
        {
            errors["StationId"] = "Station must be selected";
        }
       

        if (CurrentRefuelInfo.TruckId == Guid.Empty)
        {
            errors["TruckId"] = "Truck must be selected";
        }

        if (CurrentRefuelInfo.Quantity <= 0)
        {
            errors["Quantity"] = "Quantity must be greater than zero";
        }

        if (errors!.Any())
        {
            AppState.IsProcessing = false;
            StateHasChanged();
            return;
        }

        try
        {

            if (!Id.HasValue)
            {
                result = await RefuelInfoService.AddAsync(CurrentRefuelInfo, AppState.GetCancellationToken());
            }
            else
            {
                CurrentRefuelInfo.UpdatedAt = DateTimeOffset.UtcNow;
                result = await RefuelInfoService.UpdateAsync(CurrentRefuelInfo, AppState.GetCancellationToken());
            }

            if (result)
            {
                ToastService.ShowSuccess($"Record Successfully {(EditMode ? "Updated" : "Added")}", 5);
                 Cancel();
            }     

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            alert = new($"Operaton failed", ToastIcon.Error);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    
    private void Cancel()
    {
        nav.NavigateTo("RefuelInfos");
    }
}