@inject IRefuelInfoService RefuelInfoService

<div class="max-w-4xl mx-auto">    
     <!-- Metrics Table -->
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left rtl:text-right text-gray-500">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3">Date</th>
                    <th scope="col" class="px-6 py-3">Dispatch No</th>
                    <th scope="col" class="px-6 py-3">Station</th>
                    <th scope="col" class="px-6 py-3">Quantity</th>
                    <th scope="col" class="px-6 py-3">Unit</th>
                    <th scope="col" class="px-6 py-3">Price</th>                    
                    <th scope="col" class="px-6 py-3 text-right">Actions</th>                                                     
                </tr>
            </thead>
            <tbody>
                @if (refuelling != null && refuelling.Data!.Any())
                {
                    foreach (var info in refuelling.Data!)
                    {
                        <tr class="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                            <td class="px-6 py-4">
                                @info.Date.ToString("MMM dd, yyyy")
                            </td>
                            <td class="px-6 py-4">
                                @info.DispatchId
                            </td>
                            <td class="px-6 py-4">
                                @info.Station?.Name
                            </td>
                            <td class="px-6 py-4">
                                @info.Quantity
                            </td>
                            <td class="px-6 py-4">
                                @info.Unit.ToString()
                            </td>
                            <td class="px-6 py-4">
                                @(info.Price.HasValue ? info.Price.Value.ToString("N2") : "-")
                            </td>                            
                            <td class="px-6 py-4 text-right">
                                <div class="flex justify-end space-x-3">                                    
                                    <button 
                                        @onclick="() => Delete(info.Id)" 
                                        class="font-medium text-red-600 dark:text-red-500 hover:underline">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
                            @if (AppState.IsBusy)
                            {
                                <div class="flex justify-center items-center">
                                    <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    Loading refuel infos...
                                </div>
                            }
                            else
                            {
                                <div class="flex flex-col items-center justify-center py-6">
                                    <svg class="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span class="text-lg font-medium">No refuelling infos found</span>
                                    <p class="text-sm text-gray-500 mt-1">Try adjusting your search or add a new refuel info</p>
                                </div>
                            }
                        </td>
                    </tr>
                }                                
            </tbody>
        </table>
    </div>

</div>
@* <tr class="bg-white border-b hover:bg-gray-50"> *@

@code {
    [Parameter] public string? Dispatch { get; set; }
    private GridDataResponse<RefuelInfo>? refuelling = null;
    private GridDataRequest request = new();
    [Parameter] public EventCallback OnSave { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Dispatch))
        {
            request = new GridDataRequest { SearchTerm = Dispatch, Page = 0, PageSize = 10};
            await Loadrefuelling();
        }        
    }

    private async Task Loadrefuelling()
    {
        AppState.IsBusy = true;
        try 
        {
            refuelling = await RefuelInfoService.GetPagedAsync(request, AppState.GetCancellationToken());
        }
        finally
        {
            AppState.IsBusy = false;
        }        
    }

    private async Task Delete(Guid id)
    {
        AppState.IsProcessing = true;
        try
        {
            var response = await RefuelInfoService.DeleteAsync(id, AppState.GetCancellationToken());
            if (response)
            {
                ToastService.ShowSuccess("Record deleted successfully");
                await OnSave.InvokeAsync();
            }
            else
            {
                ToastService.ShowError("Failed to delete info");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to delete info");
        }
        AppState.IsProcessing = false;
    }
}