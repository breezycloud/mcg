@* TruckReport.razor *@
@page "/trucks/report"
@using System.Text
@inject ITruckService TruckService
@inject ITripService TripService
@inject IExportService ExportService
<div class="p-6">
    <div class="mb-6">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Truck Status Report</h1>
        <p class="text-sm text-gray-500 dark:text-gray-400">Real-time truck tracking with 9-step status workflow</p>
    </div>

    @if (AppState.IsBusy)
    {
        <Loader />
    }
    else
    {
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 mb-6">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Report Filters</h3>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Product Type</label>
                        <select @bind="Filters.ProductType" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="">All Products</option>
                            @foreach (var product in Enum.GetValues<Product>())
                            {
                                <option value="@product">@StringConverter.ToDescription(product)</option>
                            }
                        </select>
                    </div>
                    
                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Truck Status</label>
                        <select @bind="Filters.TruckStatus" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="">All Statuses</option>
                            <option value="Dispatched to Loading">Dispatched to Loading</option>
                            <option value="Delivery Trip to Station">Delivery Trip to Station</option>
                            <option value="Arrived at Depot">Arrived at Depot</option>
                            <option value="Invoiced to Station">Invoiced to Station</option>
                            <option value="Arrived at Discharge">Arrived at Discharge</option>
                            <option value="Discharging">Discharging</option>
                            <option value="Return Trip">Return Trip</option>
                            <option value="Awaiting Loading">Awaiting Loading</option>
                            <option value="Out of Service">Out of Service</option>
                            <option value="Under Repair">Under Repair</option>
                        </select>
                    </div>

                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Report Period</label>
                        <select @bind="Filters.ReportMonth" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="">All Months</option>
                            @foreach (var month in GetMonthOptions())
                            {
                                <option value="@month.Value">@month.Text</option>
                            }
                        </select>
                    </div>

                    <div>
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Year</label>
                        <select @bind="Filters.ReportYear" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="">All Years</option>
                            @foreach (var year in GetYearOptions())
                            {
                                <option value="@year">@year</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex flex-wrap gap-3 pt-4 border-t border-gray-200 dark:border-gray-600">
                    <button @onclick="ApplyFilters" class="px-5 py-2.5 text-sm font-medium text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"></path>
                        </svg>
                        Generate Report
                    </button>
                    <button @onclick="ClearFilters" class="px-5 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700 flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                        Clear Filters
                    </button>
                    <button @onclick="ExportToCsv" class="px-5 py-2.5 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800 flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Export to CSV
                    </button>
                </div>
            </div>
        </div>

        @* <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-6 mb-6">
            @foreach (var status in GetStatusSummary())
            {
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-lg @status.Color mr-4">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@status.Icon" />
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-gray-500 dark:text-gray-400">@status.Name</p>
                            <p class="text-2xl font-bold text-gray-900 dark:text-white">@status.Count</p>
                        </div>
                    </div>
                </div>
            }
        </div> *@

        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                    Truck Status Report - @GetReportPeriod()
                </h3>
                <span class="text-sm text-gray-500 dark:text-gray-400">
                    @FilteredTruckReports.Count trucks
                </span>
            </div>

            <div class="overflow-x-auto">
                <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400 sticky top-0">
                        <tr>
                            <th scope="col" class="px-4 py-3 font-semibold">Truck Number</th>
                            <th scope="col" class="px-4 py-3 font-semibold">Product</th>
                            <th scope="col" class="px-4 py-3 font-semibold">Status</th>
                            <th scope="col" class="px-4 py-3 font-semibold">Location</th>
                            <th scope="col" class="px-4 py-3 font-semibold text-center">Total Trips</th>
                            @foreach (var month in DisplayMonths)
                            {
                                <th scope="col" class="px-3 py-3 font-semibold text-center">@month</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var report in FilteredTruckReports)
                        {
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                <td class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    @report.TruckNumber
                                </td>
                                <td class="px-4 py-3">
                                    <span class="px-2 py-1 text-xs font-medium rounded-full @GetProductBadgeClass(report.Product)">
                                        @report.Product
                                    </span>
                                </td>
                                <td class="px-4 py-3">
                                    <span class="px-3 py-1 text-xs font-medium rounded-full @GetStatusBadgeClass(report.TruckStatus)">
                                        @report.TruckStatus
                                    </span>
                                </td>
                                <td class="px-4 py-3 text-sm">
                                    @report.Location
                                </td>
                                <td class="px-4 py-3 text-center font-semibold text-green-600 dark:text-green-400">
                                    @report.TotalLoading
                                </td>
                                @foreach (var month in DisplayMonths)
                                {
                                    var monthlyCount = report.MonthlyLoading.ContainsKey(month) ? report.MonthlyLoading[month] : 0;
                                    <td class="px-3 py-3 text-center @(monthlyCount > 0 ? "text-blue-600 font-medium dark:text-blue-400" : "text-gray-500")">
                                        @monthlyCount
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                    @if (FilteredTruckReports.Any())
                    {
                        <tfoot class="bg-gray-50 dark:bg-gray-700 border-t-2 border-gray-200 dark:border-gray-600">
                            <tr>
                                <td colspan="4" class="px-4 py-3 font-semibold text-gray-900 dark:text-white text-right">
                                    Totals:
                                </td>
                                <td class="px-4 py-3 text-center font-bold text-gray-900 dark:text-white">
                                    @FilteredTruckReports.Sum(t => t.TotalLoading)
                                </td>
                                @foreach (var month in DisplayMonths)
                                {
                                    var monthTotal = FilteredTruckReports.Sum(t => t.MonthlyLoading.ContainsKey(month) ? t.MonthlyLoading[month] : 0);
                                    <td class="px-3 py-3 text-center font-bold @(monthTotal > 0 ? "text-blue-700 dark:text-blue-300" : "text-gray-700 dark:text-gray-300")">
                                        @monthTotal
                                    </td>
                                }
                            </tr>
                        </tfoot>
                    }
                </table>
            </div>
        </div>
    }
</div>

@if (IsExporting)
{
    <div class="fixed inset-0 bg-gray bg-opacity-50 flex justify-center items-center z-50">
        <div class="bg-white dark:bg-gray-800 p-6 rounded shadow-md w-96">
            <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2">Exporting...</h2>
            <div class="w-full bg-gray-200 rounded-full h-4 mb-4 dark:bg-gray-700">
                <div class="bg-green-500 h-4 rounded-full transition-all duration-300" style="width:@Progress%"></div>
            </div>
            <p class="text-sm text-gray-600 dark:text-gray-300">Please wait while we generate the report...</p>
        </div>
    </div>
}

@code {
    private List<TruckReportDto> AllTruckReports { get; set; } = new();
    private List<TruckReportDto> FilteredTruckReports { get; set; } = new();
    private List<string> DisplayMonths { get; set; } = new();
    private bool IsExporting { get; set; } = false;
    private int Progress { get; set; } = 0;

    private TruckReportFilters Filters { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;
        await LoadReportData();
        AppState.IsBusy = false;
    }

    private async Task LoadReportData()
    {
        var trucks = await TruckService.GetAsync(AppState.GetCancellationToken());
        var reportData = new List<TruckReportDto>();
        
        foreach (var truck in trucks)
        {
            var truckReport = await GenerateTruckReport(truck);
            reportData.Add(truckReport);
        }

        AllTruckReports = reportData;
        FilteredTruckReports = reportData;
        DisplayMonths = GetDisplayMonths();
    }

    private async Task<TruckReportDto> GenerateTruckReport(Truck truck)
    {
        var trips = truck.Trips.ToList();
        var currentTrip = trips.FirstOrDefault(t => t.Status == TripStatus.Active || t.Status == TripStatus.Dispatched);
        var completedTrip = trips.FirstOrDefault(t => t.Status == TripStatus.Completed);
        var closedTrip = trips.FirstOrDefault(t => t.Status == TripStatus.Closed);

        var statusInfo = GetTruckStatusInfo(truck, currentTrip, completedTrip, closedTrip, trips);
        
        var monthlyLoading = new Dictionary<string, int>();
        var months = GetDisplayMonths();
        foreach (var month in months) monthlyLoading[month] = 0;

        foreach (var trip in trips)
        {
            var monthName = trip.Date.ToString("MMMM yyyy");
            if (monthlyLoading.ContainsKey(monthName))
                monthlyLoading[monthName]++;
        }

        return new TruckReportDto
        {
            TruckId = truck.Id,
            TruckNumber = truck.TruckNo,
            Product = truck.Product?.ToString() ?? "N/A",
            TruckStatus = statusInfo.Status,
            Location = statusInfo.Location,
            TotalLoading = trips.Count,
            MonthlyLoading = monthlyLoading
        };
    }

    private (string Status, string Location) GetTruckStatusInfo(Truck truck, Trip? currentTrip, Trip? completedTrip, Trip? closedTrip, List<Trip> allTrips)
    {
        if (currentTrip != null && currentTrip.Status == TripStatus.Dispatched && string.IsNullOrWhiteSpace(currentTrip.LoadingInfo?.WaybillNo))
            return ("Dispatched", currentTrip.LoadingDepot?.Name ?? "Loading Point");

        if (currentTrip != null && !string.IsNullOrWhiteSpace(currentTrip.LoadingInfo?.WaybillNo) && (currentTrip.ArrivalInfo is null && !currentTrip.ArrivalInfo.ArrivedAtStation || !currentTrip.ArrivalInfo.ArrivedDepot))
            return ("Delivery Trip", currentTrip.LoadingInfo?.Destination ?? "");

        if (currentTrip != null && currentTrip.LoadingInfo?.DispatchType == DispatchType.Depot && currentTrip.ArrivalInfo?.ArrivedDepot == true && currentTrip.ArrivalInfo?.InvoiceIssued ==false)
            return ("Arrived at Depot", currentTrip.ReceivingDepot?.Name ?? "Depot");
        
        if (currentTrip != null && (currentTrip.LoadingInfo?.DispatchType == DispatchType.Depot && currentTrip.ArrivalInfo?.InvoiceIssued == true && currentTrip.Discharges is null || !currentTrip.Discharges.Any()))
            return ("Invoiced to Station", currentTrip.LoadingInfo?.Destination!);

        if (currentTrip != null && !currentTrip.Discharges.Any() && (currentTrip.ArrivalInfo?.ArrivedAtStation == true || currentTrip.ArrivalInfo?.ArrivedDepot == true))
            return ("Arrived at Discharge", currentTrip.LoadingInfo?.Destination!);

        if (currentTrip != null && currentTrip.Discharges.Any() && currentTrip.Discharges.Count(d => d.IsFinalDischarge) < 1)
            return ("Discharging", currentTrip.Discharges.Last().Station?.Name ?? "Station");

        if (currentTrip != null && currentTrip.Discharges.Any(d => d.IsFinalDischarge))
            return ("Return Trip", "Returning to Depot");

        if (closedTrip != null)
            return ("Awaiting Loading", closedTrip.LoadingDepot?.Name ?? "Loading Point");

        if (!truck.IsActive)
            return ("Out of Service", "Disabled");

        if (truck.ServiceRequests.Any(x => x.Status == RequestStatus.InProgress))
            return ("Under Repair", "Service Request");

        return ("Available", "Ready");
    }
    
    private List<(string Name, int Count, string Color, string Icon)> GetStatusSummary()
    {
        return new List<(string, int, string, string)>
        {            
            ("Dispatched", FilteredTruckReports.Count(t => t.TruckStatus == "Dispatched to Loading"), 
            "bg-orange-100 dark:bg-orange-900/20", 
            "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-4.586a1 1 0 00-.293-.707l-6.414-6.414a1 1 0 00-.707-.293H6a2 2 0 00-2 2v11a2 2 0 002 2z"),
                     
            ("Delivery", FilteredTruckReports.Count(t => t.TruckStatus == "Delivery Trip to Station"), 
            "bg-blue-100 dark:bg-blue-900/20", 
            "M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"),
                        
            ("Depot", FilteredTruckReports.Count(t => t.TruckStatus == "Arrived at Depot"), 
            "bg-yellow-100 dark:bg-yellow-900/20", 
            "M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-8 3h15M4 3h16M4 21h16"),
                        
            ("Invoiced", FilteredTruckReports.Count(t => t.TruckStatus == "Invoiced to Station"), 
            "bg-green-100 dark:bg-green-900/20", 
            "M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"),
                        
            ("Discharge", FilteredTruckReports.Count(t => t.TruckStatus == "Arrived at Discharge"), 
            "bg-purple-100 dark:bg-purple-900/20", 
            "M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a4 4 0 01-5.656 0m0 0l-2.829-2.829m2.829 2.828L9.343 18.9m4.657 0a4 4 0 015.656 0m0 0l2.829 2.829m-2.829-2.828L18.657 21.1"),
                        
            ("Discharging", FilteredTruckReports.Count(t => t.TruckStatus == "Discharging"), 
            "bg-indigo-100 dark:bg-indigo-900/20", 
            "M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100-4m0 4v2m0-6V4"),
                        
            ("Return", FilteredTruckReports.Count(t => t.TruckStatus == "Return Trip"), 
            "bg-teal-100 dark:bg-teal-900/20", 
            "M9 12l3 3m0 0l3-3m-3 3v9m-9-6H3m18 0h-3m-9 6a9 9 0 01-9-9 9 9 0 0118 0 9 9 0 01-9 9z"),
                        
            ("Awaiting", FilteredTruckReports.Count(t => t.TruckStatus == "Awaiting Loading"), 
            "bg-gray-100 dark:bg-gray-700/50", 
            "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"),
                        
            ("Out of Service", FilteredTruckReports.Count(t => t.TruckStatus == "Out of Service"), 
            "bg-red-100 dark:bg-red-900/20", 
            "M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728")
        };
    }

    private void ApplyFilters()
    {
        FilteredTruckReports = AllTruckReports.Where(report =>
            (string.IsNullOrEmpty(Filters.ProductType) || report.Product == Filters.ProductType) &&
            (string.IsNullOrEmpty(Filters.TruckStatus) || report.TruckStatus == Filters.TruckStatus) &&
            (string.IsNullOrEmpty(Filters.ReportMonth) || report.MonthlyLoading.Any(m => m.Key.Contains(Filters.ReportMonth))) &&
            (string.IsNullOrEmpty(Filters.ReportYear) || report.MonthlyLoading.Any(m => m.Key.Contains(Filters.ReportYear)))
        ).ToList();
    }

    private void ClearFilters()
    {
        Filters = new TruckReportFilters();
        FilteredTruckReports = AllTruckReports;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Dispatched" => "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300",
            "Delivery Trip" => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "Arrived at Depot" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            "Invoiced to Station" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "Arrived at Discharge" => "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
            "Discharging" => "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300",
            "Return Trip" => "bg-teal-100 text-teal-800 dark:bg-teal-900 dark:text-teal-300",
            "Awaiting Loading" => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
            "Out of Service" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            "Under Repair" => "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private bool IsUnderMaintenance(Truck truck)
    {
        return false;
    }

    private bool HasValidCalibration(Truck truck)
    {
        return truck.CalibrationParams?.Any() == true;
    }
    
    private async Task ExportToCsv()
    {
        IsExporting = true;
        Progress = 5;
        StateHasChanged();
        int i = 0;
        int count = 0;
        try
        {
            AppState.IsProcessing = true;
            Progress = 25;
            StateHasChanged();
                         
            var csvContent = new StringBuilder();
                        
            var headers = new List<string>
            {
                "Truck Number",
                "Product", 
                "Truck Status",
                "Total Loading"
            };
            
            // Add monthly headers
            headers.AddRange(DisplayMonths);
            
            csvContent.AppendLine(string.Join(",", headers.Select(EscapeCsvValue)));            
        
            // Create data rows
            count = FilteredTruckReports.Count;
            foreach (var report in FilteredTruckReports)
            {
                i = i + 1;
                var rowData = new List<string>
                {
                    report.TruckNumber,
                    report.Product,
                    report.TruckStatus,
                    report.TotalLoading.ToString()
                };
                                
                foreach (var month in DisplayMonths)
                {
                    var monthlyCount = report.MonthlyLoading.ContainsKey(month) ? report.MonthlyLoading[month] : 0;
                    rowData.Add(monthlyCount.ToString());
                }
                
                csvContent.AppendLine(string.Join(",", rowData.Select(EscapeCsvValue)));

                Progress = 25 + (int)(((i + 1) / (double)count) * 70);
                StateHasChanged();
                await Task.Delay(10);
            }
            
            
            var fileBytes = Encoding.UTF8.GetBytes(csvContent.ToString());
            var fileName = $"TruckLoadingReport_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            await ExportService.ExportCsvContent(fileBytes, fileName);            
            ToastService.ShowSuccess("Truck report exported to CSV successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to export report: " + ex.Message);
        }
        finally
        {
            AppState.IsProcessing = false;

            Progress = 100;
            await Task.Delay(500);
            IsExporting = false;
            StateHasChanged();
        }
    }

    private string EscapeCsvValue(string value)
    {
        if (string.IsNullOrEmpty(value))
            return string.Empty;
        
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n") || value.Contains("\r"))
        {
            value = value.Replace("\"", "\"\"");
            return $"\"{value}\"";
        }

        return value;
    }

    private async Task ExportToExcel()
    {
        try
        {
            AppState.IsProcessing = true;
            await TruckService.ExportToExcel(FilteredTruckReports, "TruckLoadingReport.xlsx");
            ToastService.ShowSuccess("Report exported to Excel successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to export report: " + ex.Message);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    private List<string> GetDisplayMonths()
    {
        var months = new List<string>();
        var currentDate = DateTime.Now;
        
        // Show current year months starting from current month
        for (int i = 0; i < 12; i++)
        {
            var date = currentDate.AddMonths(i);
            months.Add(date.ToString("MMMM yyyy"));
        }
        
        return months;
    }

    private List<(string Value, string Text)> GetMonthOptions()
    {
        return new List<(string, string)>
        {
            ("January", "January"), ("February", "February"), ("March", "March"),
            ("April", "April"), ("May", "May"), ("June", "June"),
            ("July", "July"), ("August", "August"), ("September", "September"),
            ("October", "October"), ("November", "November"), ("December", "December")
        };
    }

    private List<int> GetYearOptions()
    {
        var currentYear = DateTime.Now.Year;
        return Enumerable.Range(currentYear - 2, 5).ToList(); // Last 2 years + next 2 years
    }

    private string GetReportPeriod()
    {        
        if (!string.IsNullOrEmpty(Filters.ReportMonth) && !string.IsNullOrEmpty(Filters.ReportYear))
            return $"{Filters.ReportMonth} {Filters.ReportYear}";
        else if (!string.IsNullOrEmpty(Filters.ReportYear))
            return $"Year {Filters.ReportYear}";
        else
            return "All Time";
    }

    private string GetProductBadgeClass(string product)
    {
        return product switch
        {
            "PMS" => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "AGO" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "ATK" => "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
            "LPG" => "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300",
            "CNG" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }    
}